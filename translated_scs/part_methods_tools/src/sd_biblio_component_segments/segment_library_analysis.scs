.segment_library_analysis = [*
.system_element_2798
=> nrel_inclusion: [*

	.system_element_2890
	=> nrel_note: [<p>На данный момент не существует комплексной библиотеки многократно используемых семантически совместимых компонентов компьютерных систем в целом, не говоря об интеллектуальных. Существуют некоторые попытки создания библиотек типовых методов и программ для традиционных компьютерных систем, однако такие библиотеки не решают <em>Проблемы в реализации компонентного проектирования интеллектуальных систем</em>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_2891
	=> nrel_note: [<p>Термин "библиотека подпрограмм", одними из первых упомянули Уилкс М., Уиллер Д. и Гилл С. в качестве одной из форм организации вычислений на компьютере. Исходя из изложенного в их книге, под библиотекой понимался набор "коротких, заранее заготовленных программ для отдельных, часто встречающихся (стандартных) вычислительных операций". Стоит отметить, что компонентами библиотек являются не только программы, но и компоненты интерфейсов и баз знаний.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_122: 
			.system_element_2810;
			.system_element_2811;
			.system_element_2812
		;;
	*);;

	.system_element_2890
	=> nrel_note: [<p>К традиционным решениям относятся <em>пакетные менеджеры</em> языков программирования и операционных систем, а также отдельные системы и платформы со встроенными компонентами и средствами для сохранения создаваемых компонентов.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_1884: [<p>Компоненты библиотеки могут быть реализованы на разных языках программирования (что приводит к тому, чтодля каждого языка программирования разрабатываются свои библиотеки со своими решениями различных частовстречаемых ситуаций), а также могут располагаться в разных местах, что приводит к тому, что в библиотеке необходимо средство для поиска компонентов и их установки.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_2892
	-> .system_element_252: 
		.system_element_2893;
		.system_element_2894;
		.system_element_2895;
		.system_element_2896;
		.system_element_2897;
		.system_element_2898
	;
	=> .system_element_1797: [<p>Решение конфликтов при установке зависимых компонентов.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_1814: {
		[<p><em>пакетные менеджеры</em> не учитывают семантику компонентов, а только лишь устанавливают компоненты по идентификатору. Библиотеки таких компонентов являются только лишь хранилищем компонентов, никак не учитывающим назначение компонентов, их преимущества и недостатки, сферы применения, иерархию компонентов и другую информацию, необходимую для интеллектуализации компонентного проектирования компьютерных систем.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Поиск компонентов в библиотеках компонентов, соответствующих данных пакетным менеджерам сводится к поиску по идентификатору компонента. Современные библиотеки компонентов ориентированы только на какой-то определенный язык программирования, операционную систему или платформу.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_122: .system_element_2813;;
		*);
		[<p>Современные пакетные менеджеры являются лишь "установщиками" без автоматической интеграции компонентов в систему.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Существенным недостатком современного подхода являетсяплатформенная зависимость компонентов. Современные библиотеки компонентов ориентированы только на какой-то определенный язык программирования, операционную систему или платформу.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};
	=> nrel_note: [<p>Пакетные менеджеры языков программирования и операционных систем устроены по следующему принципу: существует хранилище компонентов (библиотека), которая представляет собой множество пакетов этого языка программирования или операционной системы и с которым взаимодействует менеджер компонентов.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_2893
	<= .system_element_2899: .system_element_573;
	=> nrel_note: [<p>пакетный менеджер pip является системой управления пакетами, которая используется для установки пакетов из Python Package Index, который является некоторой библиотекой таких пакетов. Зачастую pip устанавливается вместе с Python.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_739: {
		[<p>Установка пакета.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Установка пакета специализированной версии.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Удаление пакета.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Переустановка пакета.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Отображение установленных пакетов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Поиск пакетов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Верификация зависимостей пакетов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Создание файла конфигурации со списком установленных пакетов и их версий.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Установка множества пакетов из файла конфигурации.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};
	=> .system_element_241: "file://Contents/part_methods_tools/src/images/sd_ostis_library/configuration_file.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_explanation: [<p>Пример файла конфигурации пакетов pip.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> .system_element_1797: [<p>Хорошо работает с зависимостями, отображает безуспешно установленные пакеты, а также отображает информацию о требуемой версии пакета при конфликте с другим пакетом.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_2901: .system_element_2900;;

	.system_element_2895
	=> .system_element_1797: [<p>Автоматически работает с виртуальными окружениями, способен самостоятельно их находить и создавать.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_1797: [<p>Файл конфигурации для пакетов poetry является более богатым, чем у pip, он хранит такие сведения, как имя проекта, версия проекта, его описание, лицензия, список авторов, URL проекта, его документации и сайта, список ключевых слов проекта и список PyPI классификаторов.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_241: "file://Contents/part_methods_tools/src/images/sd_ostis_library/configuration_file2.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_explanation: [<p>Пример файла конфигурации пакетов poetry</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_note: [<p>Такой вид спецификации не позволяет достичь совместимости между компонентами даже в рамках Python проектов и предназначена преимущественно только для чтения разработчиком.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_explanation: [<p>Автоматизировать проектирование компьютерных систем с помощью пакетного менеджера  <em>poetry</em> или <em>pip</em> невозможно, так как требуется вмешательство разработчика, который должен вручную совместить интерфейсы устанавливаемых пакетов.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_2902
	=> nrel_idtf: [<p>Библиотека стандартных шаблонов С++</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<- .system_element_2903;
	<- .system_element_341;
	=> nrel_explanation: [<p>Библиотека STL представляет собой набор согласованных обобщенных алгоритмов, контейнеров, средств доступа к их содержимому и различных вспомогательных функций в C++.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_inclusion: {
		.system_element_2904
		(*
			=> .system_element_2389: [<p>Хранение набора объектов в памяти.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_2905
		(*
			=> .system_element_2389: [<p>Обеспечение средств доступа к содержимому контейнера.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_2906
		(*
			=> .system_element_2389: [<p>Определение вычислительной процедуры.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_2907
		(*
			=> .system_element_2389: [<p>Адаптация компонентов для обеспечения различного интерфейса.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		.system_element_2908
		(*
			=> .system_element_2389: [<p>Сокрытие функции в объекте для использования другими компонентами.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*)
	};
	=> .system_element_241: "file://Contents/part_methods_tools/src/images/sd_ostis_library/structure_stl.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
	*);
	=> nrel_note: [<p>Составляющие Библиотеки STL позволяют уменьшить количество создаваемых компонентов. Например, вместо написания отдельной функции поиска элемента для каждого типа контейнера обеспечивается единственная версия, которая работает с каждым из них, пока соблюдаются основные требования.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Совместимость компонентов (контейнеров) в Библиотеке STL обеспечивается общим интерфейсом использования этих компонентов.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_2909
	=> nrel_note: [<p>Компонентный подход к проектированию компьютерных систем может реализовываться в рамках различных языков, платформ и приложений.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_2910: {
		.system_element_2911
		(*
			=> nrel_note: [<p>Онтология, реализованная на языке <i>OWL</i> (Web Ontology Language), представляет собой множество декларативных утверждений о сущностях словаря предметной области. <i>OWL</i> предполагает концепцию "открытого мира", в соответствии с которой применимость описаний предметной области, помещенных в конкретном физическом документе, не ограничивается лишь рамками этого документа --- содержание онтологии может быть использовано и дополнено другими документами, добавляющими новые факты о тех же сущностях или описывающими другую предметную область в терминах данной. "Открытость мира" достигается путем добавления URI каждому элементу онтологии, что позволяет воспринимать описанную на <i>OWL</i> онтологию как часть всеобщего объединенного знания.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: .system_element_2814;;
			*);;
		*);
		.system_element_2912
		(*
			=> nrel_note: [<p><em>WebProtege</em> представляет собой многопользовательский веб-интерфейс, позволяющий редактировать и хранить онтологии в формате <i>OWL</i> в совместной среде. Данный проект позволяет не только создавать новые онтологии, но также загружать уже существующие онтологии, которые хранятся на сервере университета Стэнфорда. К преимуществу данного проекта можно отнести автоматическую проверку ошибок в процессе создания объектов онтологий. Данный проект является примером попытки решения проблемы накопления, систематизации и повторного использования уже существующих решений, однако, недостатком данного решения является обособленность разрабатываемых онтологий. Каждый разработанный компонент имеет свою иерархию понятий, подход к выделению классов и сущностей, которые зависят от разработчиков данных онтологий, так как в рамках данного подхода не существует универсальной модели представления знаний, а также формальной спецификации компонентов, представленных в виде онтологий. Следовательно, возникает проблема их семантической несовместимости, что, в свою очередь, приводит к невозможности повторного использования разработанных онтологий при проектировании баз знаний. Данный факт подтверждается наличием на сервере университета Стэнфорда многообразия различных онтологий на одни и те же темы.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: .system_element_2815;;
			*);;
		*);
		.system_element_2913
		(*
			=> nrel_note: [<p>На основе языка <em>Modelica</em> разработано большое число свободно доступных библиотек компонентов, одной из которых является библиотека Modelica_StateGraph2, включающая компоненты для моделирования дискретных событий, реактивных и гибридных систем с помощью иерархических диаграмм состояния. Основным недостатком систем на базе языка <i>Modelica</i> является отсутствие совместимости компонентов и достаточной документации, а также узкая направленность разрабатываемых компонентов.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: .system_element_2816;;
			*);;
		*);
		.system_element_2914
		(*
			=> nrel_note: [<p><em>Microsoft Power Apps</em> --- это набор приложений, служб и соединителей, а также платформа данных, которая предоставляет среду разработки для эффективного создания пользовательских приложений для бизнеса. Платформа <i>Microsoft Power Apps</i> имеет средства для создания библиотеки многократно используемых компонентов графического интерфейса, а также предварительно созданные модели распознавания текста (чтение визитных карточек или чеков) и средство обнаружения объектов, которые можно подключить к разрабатываемому приложению. Библиотека компонентов <i>Microsoft Power Apps</i> представляет собой множество создаваемых пользователем компонентов, которые можно использовать в любых приложениях. Преимущество библиотеки в том, что компоненты могут настраивать свойства по умолчанию, которые можно гибко редактировать в любых приложениях, использующих компоненты. Недостаток в том, что отсутствует семантическая совместимость компонентов, спецификация компонентов, не решена проблема существования семантически эквивалентных компонентов, нет иерархии компонентов и средств поиска этих компонентов. Компоненты платформы <i>Microsoft Power Apps</i> являются многократно используемыми только для однотипных приложений, которые создаются одним и тем же разработчиком.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: .system_element_2817;;
			*);;
		*);
		.system_element_2915
		(*
			=> nrel_note: [<p><em>Платформа IACPaaS</em> (Intelligent Applications, Control and Platform as a Service) --- облачная платформа для разработки, управления и удаленного использования интеллектуальных облачных сервисов. Она предназначена для обеспечения поддержки разработки, управления и удаленного использования прикладных и инструментальных мультиагентных облачных сервисов (прежде всего интеллектуальных) и их компонентов для различных предметных областей.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_122: .system_element_2818;;
			*);;
			=> .system_element_2916: {
				[<p>Прикладным пользователям (специалистам в различных предметных областях) --- к прикладным сервисам.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Разработчикам прикладных и инструментальных сервисов и их компонентов --- к инструментальным сервисам.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Управляющим интеллектуальными сервисами.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>К сервисам управления.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			};;
			=> .system_element_2917: {
				[<p>Базовую технологию разработки прикладных и специализированных инструментальных (интеллектуальных) сервисов с использованием базовых инструментальных сервисов платформы, поддерживающих эту технологию.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Множество специализированных технологий разработки прикладных и специализированных инструментальных (интеллектуальных) сервисов, с использованием специализированных инструментальных сервисов платформы, поддерживающих эти технологии.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			};;
			=> .system_element_238: [<p><i>Платформа IACPaaS</i> не имеет средств для унифицированного представления компонентов интеллектуальных компьютерных систем и средств для их спецификации и автоматической интеграции компонентов.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*)
	}
	(*
		=> nrel_note: [<p>На текущем состоянии развития информационных технологий <u>не существует</u> комплексной библиотеки многократно используемых семантически совместимых компонентов компьютерных систем. Таким образом, предлагается комплексная библиотека многократно используемых семантически совместимых компонентов ostis-систем.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;
*];
=> nrel_comment: [<p>Завершили "Сегмент. Анализ библиотек многократно используемых компонентов"</p>];;

*];;