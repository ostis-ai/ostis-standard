.system_element_4707
=> nrel_inclusion: [*
	=> .system_element_342: 
		.system_element_6489;
		.system_element_6331
	;
	<- .system_element_3;
	-> rrel_key_sc_element: .system_element_6743;;

	.system_element_6743
	=> nrel_idtf: [<p>Предметная область Базового языка программирования ostis-систем</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>Предметная область Языка SCP</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>В данную предметную область включаются все тексты программ Языка SCP. В ней исследуется типология операторов этих программ и заданные на них отношения.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<- subject_domain;
	-> .system_element_418: 
		.system_element_3388;
		.system_element_4646
	;
	-> .system_element_6: 
		agent_scp_program;
		scp_process;
		new_scp_operator;
		scp_operator_atomic_type
	;
	-> .system_element_335: 
		rrel_init;
		rrel_new_param;
		rrel_in;
		rrel_out;
		rrel_scp_operand
	;
	=> nrel_introduction: <
		[<p>Выделение Базового языка программирования для ostis-систем позволяет обеспечить четкое разделение уровня методов и соответственно, навыков ostis-системы, которые могут быть полностью описаны на уровне базы знаний и более низкоуровневых навыков, обеспечивающих интерпретацию указанных навыков более высокого уровня. Другими словами, выделение такого языка позволяет обеспечить <u>платформенную независимость</u> ostis-систем, как в случае программной реализации <i>ostis-платформы</i>, так и в случае <i>ассоциативного семантического компьютера</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_35: {
				.system_element_6692
			};;
		*)
	>;;

	.system_element_3388
	=> .system_element_172: [<p>scp-программа</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_explanation: [<p>В качестве базового языка для описания программ обработки текстов<i>SC-кода</i> предлагается <i>Язык SCP</i>.<i>Язык SCP</i> --- это графовый язык процедурного программирования, предназначенный для эффективной обработки <i>sc-текстов</i>. <i>Язык SCP</i> является языком параллельного асинхронного программирования.Языком представления данных для текстов <i>Языка SCP</i> (<i>scp-программ</i>) является <i>SC-код</i> и, соответственно, любые варианты его внешнего представления. <i>Язык SCP</i> сам построен на основе <i>SC-кода</i>, в следствие чего <i>scp-программы</i> сами по себе могут входить в состав обрабатываемых данных для <i>scp-программ</i>, в т.ч. по отношению к самим себе. Таким образом, <i>язык SCP</i> предоставляет возможность построения реконфигурируемых программ. Однако для обеспечения возможности реконфигурирования программы непосредственно в процессе ее интерпретации необходимо на уровне интерпретатора <i>Языка SCP (Aбстрактной scp-машины)</i> обеспечить уникальность каждой исполняемой копии исходной программы. Такую исполняемую копию, сгенерированную на основе <i>scp-программы</i>, будем называть <i>scp-процессом</i>. Включение знака некоторого <i>действия в sc-памяти</i> во множество <i>scp-процессов</i> гарантирует тот факт, что в декомпозиции данного действия будут присутствовать только знаки элементарных действий (<i>scp-операторов</i>), которые может интерпретировать реализация <i>Aбстрактной scp-машины</i> (интерпретатора scp-программ).<i>Язык SCP</i> рассматривается как ассемблер для семантического компьютера.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_6744
	<= nrel_combination: {
		.system_element_6745;
		.system_element_6746
	};
	=> nrel_note: [<p><i>Базовая модель обработки sc-текстов</i> включает в себя <i>Предметную область Базового языка программирования ostis-систем</i>, то есть описание <i>Синтаксиса</i> и <i>Денотационной семантики Языка SCP</i>, а также описание <i>Абстрактной scp-машины</i>, которая является моделью <i>scp-интерпретатора</i>, который должен являться частью <i>ostis-платформы</i> (хотя в общем случае могут существовать варианты платформы, не содержащие такого интерпретатора, что, однако, не позволит использовать достоинства предлагаемой базовой модели.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_4713: {
		[<p>Тексты программ <i>Языка SCP</i> записываются при помощи тех же унифицированных семантических сетей, что и обрабатываемая информация, таким образом, можно сказать, что <i>Синтаксис языка SCP</i> на базовом уровне совпадает с <i>Синтаксисом SC-кода</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Подход к интерпретации <i>scp-программ</i> предполагает создание при каждом вызове <i>scp-программы</i> уникального <i>scp-процесса</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};
	=> .system_element_2880: {
		[<p>Одновременно в общей памяти могут выполняться несколько независимых<i>sc-агентов</i>, при этом разные копии <i>sc-агентов</i> могут выполняться на разных серверах, за счет распределенной реализации интерпретатора sc-моделей (<i>платформы реализации sc-моделей компьютерных систем</i>). Более того, <i>Язык SCP</i> позволяет осуществлять параллельные асинхронные вызовы подпрограмм с последующей синхронизацией, и даже параллельно выполнять операторы в рамках одной <i>scp-программы</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Перенос <i>sc-агента</i> из одной системы в другую заключается в простом переносе фрагмента базы знаний, без каких-либо дополнительных операций, зависящих от платформы интерпретации.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Тот факт, что спецификации <i>sc-агентов</i> и их программы могут быть записаны на том же языке, что и обрабатываемые знания, существенно сокращает перечень специализированных средств, предназначенных для проектирования машин обработки знаний, и упрощает их разработку за счет использования более универсальных компонентов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Тот факт, что для интерпретации <i>scp-программы</i> создается соответствующий ей уникальный <i><b>scp-процесс</b></i>, позволяет по возможности оптимизировать план выполнения перед его реализацией и даже непосредственно в процессе выполнения без потенциальной опасности испортить общий универсальный алгоритм всей программы. Более того, такой подход к проектированию и интерпретации программ позволяет говорить о возможности создания самореконфигурируемых программ.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};;

	.system_element_4646
	=> .system_element_6747: .system_element_6746;
	<- .system_element_281
	(*
		<= .system_element_4703: .system_element_4908;;
	*);
	=> nrel_note: [<p><i>Абстрактная scp-машина</i> представляет собой интерпретатор <i>scp-программ</i>, который должен являться частью <i>платформы интерпретации sc-моделей компьютерных систем</i> (хотя в общем случае могут существовать варианты платформы, не содержащие такого интерпретатора, что, однако, не позволит использовать достоинства предлагаемой базовой модели</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	new_scp_program
	<= nrel_inclusion: program_in_sc_memory;
	=> nrel_inclusion: agent_scp_program;
	=> nrel_explanation: [<p>Каждая <b><i>scp-программа</i></b> представляет собой <i>обобщенную структуру</i>, описывающую один из вариантов декомпозиции действий некоторого класса, выполняемых в sc-памяти. Знак <i>sc-переменной</i>, соответствующей конкретному декомпозируемому действию является в рамках <b><i>scp-программы</i></b> <i>ключевым sc-элементом'</i>. Также явно указывается принадлежность данного знака множеству <i>scp-процессов</i>.Принадлежность некоторого действия множеству <i>scp-процессов</i> гарантирует тот факт, что в декомпозиции данного действия будут присутствовать только знаки элементарных действий (<i>scp-операторов</i>), которые может интерпретировать реализация абстрактной scp-машины.Таким образом, каждая <b><i>scp-программа</i></b> описывает в обобщенном виде декомпозицию некоторого <i><b>scp-процесса</b></i> на взаимосвязанные <i>scp-операторы</i>, с указанием, при их наличии, аргументов для данного <i>scp-процесса</i>.По сути каждая <b><i>scp-программа</i></b> представляет собой описание последовательности элементарных операций, которые необходимо выполнить над семантической сетью, чтобы выполнить более сложное действие некоторого класса.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_126: "file://images/sd_scp/program_example.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример scp-программы</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_explanation: [<p>В приведенном примере показана <i>scp-программа</i>, состоящая из трех <i>scp-операторов</i>. Данная программа проверяет, содержится ли в заданном множестве (первый параметр) заданный элемент (второй параметр), и, если нет, то добавляет его в это множество.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	-> .system_element_203: 
		.system_element_6748;
		<-_ scp_process;
		_-> .system_element_6750:: .system_element_6749;
		_-> .system_element_6752:: .system_element_6751;
		<=_ nrel_decomposition_of_action:: .system_element_6753
		(*
			_-> rrel_1:: .system_element_6754
			(*
				<-_ .system_element_6755;;
				_-> .system_element_6756:: .system_element_6749;;
				_-> .system_element_6758:: .system_element_6757;;
				_-> .system_element_6759:: .system_element_6751;;
				_=> nrel_else_new:: .system_element_6760;;
				_=> nrel_then:: .system_element_6761;;
			*);;
			_-> .system_element_6760
			(*
				<-_ .system_element_6762;;
				_-> .system_element_6763:: .system_element_6749;;
				_-> .system_element_6764:: .system_element_6757;;
				_-> .system_element_6765:: .system_element_6751;;
				_=> .system_element_6766:: .system_element_6761;;
			*);;
			_-> .system_element_6761
			(*
				<-_ .system_element_6767;;
			*);;
		*)
	;;
*];;

agent_scp_program
<= nrel_inclusion: new_scp_program;
=> nrel_explanation: [<p><b><i>агентные scp-программы</i></b> представляют собой частный случай <i>scp-программ</i> вообще, однако заслуживают отдельного рассмотрения, поскольку используются наиболее часто. <i>Scp-программы</i> данного класса представляют собой реализации программ агентов обработки знаний и имеют жестко фиксированный набор параметров. Каждая такая программа имеет ровно два <i>in-параметра'</i>. Значение первого параметра является знаком бинарной ориентированной пары, являющейся вторым компонентом связки отношения <i>первичное условие инициирования*</i> для абстрактного <i>sc-агента</i>, во множество <i>программ sc-агента*</i> которого входит рассматриваемая <b><i>агентная scp-программа</i></b>, и, по сути, описывает класс событий, на которые реагирует указанный sc-агент.Значением второго параметра является <i>sc-элемент</i>, с которым непосредственно связано событие, в результате возникновения которого был инициирован соответствующий <i>sc-агент</i>, т.е., например, сгенерированная либо удаляемая <i>sc-дуга</i> или <i>sc-ребро</i>.</p>]
(*
	<- lang_ru;;
	=> nrel_format: format_html;;
*);;

abstract_sc_agent_implemented_on_the_scp_language
=> .system_element_2811: {
	[<p>Общие принципы организации взаимодействия <i>sc-агентов</i> и пользователей <i>ostis-системы</i> через общую<i>sc-память</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>В результате появления в sc-памяти некоторой конструкции,удовлетворяющей условию инициирования какого-либо <i>абстрактногоsc-агента</i>, реализованного при помощи <i>Языка SCP</i>, в <i>sc-памяти</i> генерируется и инициируется <i>scp-процесс</i>. В качестве шаблона для генерации используется <i>агентная scp-программа</i>, указанная во множестве программ соответствующего <i>абстрактного sc-агента</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>Каждый такой <i>scp-процесс</i>, соответствующий некоторой <i>агентной scp-программе</i>, может быть связан с набором структур, описывающих блокировки различных типов. Таким образом, синхронизация взаимодействия параллельно выполняемых <i>scp-процесcов</i> осуществляется так же, как и в случае любых других <i>действий в sc-памяти</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>В рамках <i>scp-процесса</i> могут создаваться дочерние <i>scp-процессы</i>, однако синхронизация между ними при необходимости осуществляется посредством введения дополнительных внутренних блокировок. Таким образом, каждый <i>scp-процесс</i> с точки зрения <i>процессов в sc-памяти</i> является атомарным и законченным актом деятельности некоторого <i>sc-агента</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>Во избежание нежелательных изменений в самом теле <i>scp-процесса</i>, вся конструкция, сгенерированная на основе некоторой <i>scp-программы</i> (весь текст <i>scp-процесса</i>), должна быть добавлена в <i>полную блокировку</i>, соответствующую данному <i>scp-процессу</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>Все конструкции, сгенерированные в процессе выполнения <i>scp-процесса</i>, автоматически попадают в <i>полную блокировку</i>, соответствующую данному <i>scp-процессу</i>. Дополнительно следует отметить, что знак самой этой структуры и вся метаинформация о ней также включаются в эту структуру.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>При необходимости можно вручную разблокировать или заблокировать некоторую конструкцию каким-либо типом блокировки, используя соответствующие <i>scp-операторы</i> класса <i>scp-оператор управления блокировками</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>После завершения выполнения некоторого <i>scp-процесса</i> его текст как правило, удаляется из <i><b>sc-памяти</b></i>, а все заблокированные конструкции освобождаются (разрушаются знаки структур, обозначавших блокировки).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>Несмотря на то, что каждый <i>scp-оператор</i> представляет собой атомарное <i>действие в sc-памяти</i>, дополнительные блокировки, соответствующие одному оператору не вводятся, чтобы избежать громоздкости и избытка дополнительных системных конструкций, создаваемых при выполнении некоторого <i>scp-процесса</i>. Вместо этого используются блокировки, общие для всего <i>scp-процесса</i>. Таким образом, агенты <i>Абстрактной scp-машины</i> при интерпретации <i>scp-операторов</i> работают только с учетом блокировок, общих для всего интерпретируемого <i>scp-процесса</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	[<p>Как правило, частный <i>класс действий</i>, соответствующий конкретной <i>scp-программе</i> явно не вводится, а используется более общий класс <i>scp-процесс</i>, за исключением тех случаев, когда введение специального <i>класса действий</i> необходимо по каким-либо другим соображениям.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*)
};;

scp_process
=> nrel_explanation: [<p>Под <b><i>scp-процессом</i></b> понимается некоторое <i>действие в sc-памяти</i>, однозначно описывающее конкретный акт выполнения некоторой <i>scp-программы</i> для заданных исходных данных. Если <i>scp-программа</i> описывает алгоритм решения какой-либо задачи в общем виде, то <i>scp-процесс</i> обозначает конкретное действие, реализующее данный алгоритм для заданных входных параметроПо сути, <b><i>scp-процесс</i></b> представляет собой уникальную копию, созданную на основе <i>scp-программы</i>, в которой каждой <i>sc-переменной</i>, за исключением <i>scp-переменных'</i>, соответствует сгенерированная <i>sc-константа</i>.Принадлежность некоторого действия множеству <i>scp-процессов</i> гарантирует тот факт, что в декомпозиции данного действия будут присутствовать только знаки элементарных действий (<i>scp-операторов</i>), которые может интерпретировать реализация <i>Абстрактной scp-машины</i>.</p>]
(*
	<- lang_ru;;
	=> nrel_format: format_html;;
*);
=> .system_element_6768: <
	"file://images/sd_scp/process_example.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример scp-процесса на начальной стадии выполнения</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_explanation: [<p>Осуществляется вызов <i>scp-программы</i>. Генерируется соответствующий <i>scp-процесс</i>. Происходит инициирование начального оператора scp-процесса <i>Operator1</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_explanation: [<p>Пример поэтапного выполнения scp-процесса, соответствующего ранее рассмотренному примеру scp-программы. В приведенном примере последовательно показаны состояния <i>scp-процесса</i>, соответствующего <i><b>scp-программе</b></i>, добавляющей заданный элемент в заданное множество, если он там ранее не содержался. В примере предполагается, что рассматриваемый элемент (<i>Element1</i>) изначально не содержится во множестве (<i>Set1</i>).</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	"file://images/sd_scp/process_example2.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример scp-процесса: безуспешно выполнен оператор поиска</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_explanation: [<p>Оператор <i>Operator1</i> оказался безуспешно выполненным. Производится инициирование <i><b>scp-оператора</b> генерации трёхэлементной конструкции</i> <i>Operator2</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	"file://images/sd_scp/process_example3.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример scp-процесса: выполнен оператор генерации, элемент добавлен во множество</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_explanation: [<p>Оператор <i>Operator2</i> выполнился. Производится инициирование <i>scp-оператора завершения выполнения программы</i> <i>Operator3</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	"file://images/sd_scp/process_example4.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример scp-процесса: выполнение завершено</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_explanation: [<p>Оператор <i>Operator3</i> выполнился. Выполнение <i>scp-процесса</i> завершается.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*)
>;;
