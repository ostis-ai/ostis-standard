.system_element_4698
=> nrel_inclusion: [*
	=> .system_element_747: 
		.system_element_6516;
		.system_element_4707;
		.system_element_6517
	;;

	.system_element_6518
	=> nrel_authors: 
		.system_element_1105
	;
	-> .system_element_418: 
		.system_element_3388;
		.system_element_4646
	;
	-> .system_element_6: 
		action_in_sc_memory;
		action_in_sc_memory_initiated_by_action;
		action_of_kb_editing;
		task_solved_in_sc_memory;
		.system_element_6519;
		sc_agent;
		abstract_sc_agent;
		atomic_abstract_sc_agent;
		non_atomic_abstract_sc_agent;
		abstract_sc_agent_implemented_on_the_scp_language;
		abstract_sc_agent_is_not_implemented_on_the_scp_language;
		lock_type;
		.system_element_6520;
		new_scp_operator;
		.system_element_414;
		.system_element_6521
	;
	-> .system_element_335: 
		nrel_lock;
		.system_element_6522;
		.system_element_6523;
		.system_element_6524;
		rrel_new_param;
		rrel_scp_operand
	;
	=> .system_element_11: 
		.system_element_4927;
		.system_element_6525;
		.system_element_6526;
		.system_element_6527;
		.system_element_6528;
		.system_element_6529;
		.system_element_6530;
		.system_element_1678;
		.system_element_6531;
		.system_element_6532;
		.system_element_6533;
		.system_element_6534;
		.system_element_5341;
		.system_element_6535;
		.system_element_6536;
		.system_element_6537;
		.system_element_6538;
		.system_element_6539;
		.system_element_6540;
		.system_element_6541;
		.system_element_6542;
		.system_element_6543;
		.system_element_6544;
		.system_element_6545;
		.system_element_6546;
		.system_element_225;
		.system_element_6547;
		.system_element_6548;
		.system_element_6549;
		.system_element_417;
		.system_element_6550;
		.system_element_6551;
		.system_element_157;
		.system_element_6552;
		.system_element_6553;
		.system_element_5489;
		.system_element_6554;
		.system_element_6555;
		.system_element_6556;
		.system_element_6557;
		.system_element_6558;
		.system_element_6559;
		.system_element_6560;
		.system_element_6561;
		.system_element_6562;
		.system_element_6563;
		.system_element_6564;
		.system_element_6565;
		.system_element_6566;
		.system_element_6567;
		.system_element_6568;
		.system_element_6569;
		.system_element_6570;
		.system_element_6571;
		.system_element_6572;
		.system_element_6573;
		.system_element_6574;
		.system_element_6575;
		.system_element_6576;
		.system_element_6577;
		.system_element_6578;
		.system_element_53;
		.system_element_6579;
		.system_element_6580;
		.system_element_6581;
		.system_element_6582;
		.system_element_6583;
		.system_element_4721;
		.system_element_4722;
		.system_element_4723;
		.system_element_4724
	;
	=> nrel_summary: [<p>В предметной области формулированы актуальные проблемы текущего состояния технологий разработки гибридных решателей задач, предложен подход к их решению на основе Технологии OSTIS. Сформулированы принципы построения решателя задач как иерархической системы навыков, основанной на многоагентном подходе, приведены онтологии агентов и выполняемых ими действий. Сформулированы принципы синхронизации деятельности агентов, а также разработана онтология базового языка программирования для реализации программ агентов и модель интерпретатора такого языка.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_introduction: <
		[<p>Одним из ключевых компонентов <i>интеллектуальной системы</i>, обеспечивающим возможность решать широкий круг <i>задач</i>, является <i>решатель задач</i>. Их особенностью по сравнению с другими современными <i>программными системами</i> является необходимость решать <i>задачи</i> в условиях, когда необходимые сведения не локализованы явно в <i>базе знаний</i> <i>интеллектуальной системы</i> и должны быть найдены в процессе решения <i>задачи</i> на основании каких-либо критериев.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Говоря другими словами, если в традиционных системах при решении задачи всегда подразумевается, что есть некоторые локализованные исходные данные ("дано") и некоторое описание желаемого результата ("что требуется"), то в <i>интеллектуальной системе</i> в качестве исходных данных при решении большого числа <i>задач</i> выступает вся имеющаяся на текущий момент в системе информация, то есть вся <i>база знаний</i>. Кроме того, при невозможности решения задачи в текущем состоянии базы знаний интеллектуальная система должна иметь возможность понять, чего именно не хватает для продолжения процесса решения и попытаться добыть недостающие сведения во внешней среде (например, запросить у пользователя).</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>К настоящему времени в рамках различных направлений <i>Искусственного интеллекта</i> разработано большое количество различных <i>моделей решения задач</i>, каждая из которых позволяет решать задачи определенного класса. Расширение областей применения <i>интеллектуальных систем</i> требует от них возможности решать так называемые <i>комплексные задачи</i>, решение каждой из которых требует комбинирования нескольких моделей решения задач, при этом априори неизвестно, в каком порядке и сколько раз будет применяться та или иная модель. <i>решатели задач</i>, в рамках которых комбинируются несколько <i>моделей решения задач</i>, получили название <i>гибридных решателей задач</i>, а интеллектуальные системы, в рамках которых комбинируются различные <i>виды знаний</i> и различные <i>модели решения задач</i> --- <i>гибридных интеллектуальных систем</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_35: {
				.system_element_4927
			};;
		*);
		[<p>Повышение эффективности разработки и эксплуатации <i>гибридных интеллектуальных систем</i> требует унификации моделей представления различных <i>видов знаний</i> и <i>моделей обработки знаний</i>, которая бы позволила легко интегрировать на ее основе компоненты, соответствующие различным моделям решения задач.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	>;;

	.system_element_6584
	=> nrel_inclusion: [*
		<= .system_element_315: <
			.system_element_6585;
			.system_element_6586
		>;;

		.system_element_6585
		=> nrel_inclusion: [*

			.system_element_6587
			=> nrel_subdividing: {
				.system_element_6588;
				.system_element_6589
			};;

			.system_element_6588
			=> .system_element_264: [<p><i>решение задач с использованием хранимых программ</i> --- это решение задач, в котором предполагается, что в системе заранее присутствует программа решения задачи заданного класса и решение сводится к поиску такой программы и интерпретации ее на заданных входных данных.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> .system_element_203: [<p>К системам, ориентированным на такой подход к решению задач, относятся в том числе системы, использующие: программы, написанные на языках программирования, относящихся как к императивной, так и к декларативной парадигме, в том числе логических и функциональных;
			<li> реализации генетических алгоритмов;
			<li> нейросетевые модели обработки знаний.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_35: {
					.system_element_6525;
					.system_element_6527;
					.system_element_6526;
					.system_element_6528;
					.system_element_6530;
					.system_element_6529
				};;
			*);
			=> nrel_note: [<p>Следует отметить, что даже в случае использования хранимой <i>программы</i> решение <i>задачи</i> далеко не всегда тривиально, поскольку, во-первых, требуется найти такую хранимую <i>программу</i> на основе некоторой спецификации, во-вторых, обеспечить ее интерпретацию.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;

			.system_element_6589
			=> .system_element_264: [<p><i>решение задач в условиях, когда программа решения не известна</i> --- решение задач, в котором предполагается, что в системе необязательно присутствует готовая <i>программа</i> решения для <i>класса задач</i>, которому принадлежит некоторая сформулированная задача, подлежащая решению. В связи с этим необходимо применять дополнительные методы поиска путей решения задачи, не рассчитанные на какой-либо узкий <i>класс задач</i> (например, разбиение задачи на подзадачи, методы поиска решений в глубину и ширину, метод случайного поиска решения и метод проб и ошибок, метод деления пополам и другие), а также различные модели <i>логического вывода</i>: классические дедуктивные, индуктивные, абдуктивные; модели, основанные на <i>нечетких логиках</i>, <i>логике умолчаний</i>, <i>темпоральной логике</i>, и многие другие.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_35: {
					.system_element_6536;
					.system_element_6535;
					.system_element_6533;
					.system_element_5341;
					.system_element_1678;
					.system_element_6532;
					.system_element_6531;
					.system_element_1678;
					.system_element_6534
				};;
			*);;

			.system_element_6590
			-> .system_element_6591;
			-> .system_element_6592;
			-> .system_element_6593;
			-> .system_element_6594;
			-> .system_element_6595
			(*
				=> .system_element_35: {
					.system_element_6537
				};;
			*);
			-> .system_element_6596
			(*
				=> .system_element_35: {
					.system_element_6540
				};;
			*);
			-> .system_element_6597
			(*
				=> .system_element_35: {
					.system_element_6541
				};;
			*);
			-> .system_element_6598
			(*
				=> .system_element_35: {
					.system_element_6542
				};;
			*);
			=> nrel_note: [<p>Подробный обзор <i>решателей задач</i>, разработанных в период до 1982 года, таких как <i>GPS</i>, <i>STRIPS</i>, <i>QA3</i>, <i>ПРИЗ</i>, <i>ППР</i> приведен в книге <i>Ephymov1982</i>. Среди современных работ, исследующих вопросы применения <i>моделей решения задач</i>, не ориентированных на конкретную предметную область, можно выделить <i>Raghovsky2011</i>. Среди наиболее заметных представителей класса <i>интеллектуальных решателей задач</i>, разработанных в более поздний период, можно отметить <i>Компьютерный решатель математических задач</i>, <i>Решатель задач по планиметрии НИЦ ЭВТ</i>, <i>Программный комплекс "УДАВ"</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_35: {
					.system_element_6538;
					.system_element_6539
				};;
			*);
			=> nrel_note: [<p>Отдельного внимания заслуживают популярные в настоящее время <i>системы компьютерной алгебры</i>, такие как <i>Wolfram Mathematica</i>, <i>Maple</i>, <i>MathCAD</i> и другие. Указанные программные комплексы обладают мощной функциональностью как для проведения различного рода вычислений и экспериментов, так и для построения на их основе систем различного назначения, например обучающих. Более подробно возможности применения систем данного семейства для решения <i>задач</i> в рамках <i>Экосистемы OSTIS</i> рассмотрены в <i>Интеграция инструментов компьютерной алгебры в приложения OSTIS</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_35: {
					.system_element_6599
				};;
			*);
			=> nrel_note: [<p>Однако при всем многообразии решаемых рассмотренными системами <i>задач</i> множество <i>классов задач</i> ограничивается имеющимся в системе набором жестко заданных приемов и алгоритмов решения <i>задач</i>, явно используемых при решении той или иной <i>задачи</i>. В то же время построение сложных систем, например, систем комплексной автоматизации, невозможно без обеспечения согласованного использования различных <i>видов знаний</i> и <i>моделей решения задач</i> в рамках одной системы при решении одной и той же <i>комплексной задачи</i>. Кроме того, становится актуальной <i>задача</i> поддержки такой системы в состоянии, соответствующем текущему уровню развития технологий, дополнения ее более совершенными <i>моделями</i> и <i>методами решения задач</i>. При этом очевидно, что подобная реконфигурация системы должна осуществляться <i>непосредственно в процессе эксплуатации системы</i>, а не требовать каждый раз, например, полной остановки всего производства или отдельных его частей.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;

			.system_element_6600
			=> .system_element_59: 
				[<p>В каждый момент времени <i>решатель задач</i> должен обеспечивать решение задач из оговоренного класса за оговоренное время, при этом результат решения задачи должен удовлетворять некоторым известным требованиям. Другими словами, как и в случае современных <i>компьютерных систем</i>, корректность результатов решения задач на этапе разработки системы должна верифицироваться специальными методами, в том числе для этого могут быть использованы такие современные подходы, как <i>unit-тестирование</i>, <i>тестирование методом "черного ящика"</i> и другие.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> nrel_subdividing: {
						[<p>Для явно сформулированных <i>задач</i> система всегда должна давать какой-либо ответ за оговоренное время, при этом ответ может быть отрицательным (система не смогла решить поставленную задачу), возможно, с объяснением причин, по которым решение в текущий момент оказалось невозможным. Одним из факторов безуспешности решения является выход за рамки установленного промежутка времени.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p>Если явно сформулированная <i>задача</i> решена, то все <i>информационные процессы</i>, направленные на ее решение, должны быть уничтожены. Особенно актуальным данное требование становится в ситуации, когда для решения одной и той же задачи параллельно используются сразу несколько подходов и заранее неизвестно, какой из них приведет к результату раньше других.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p>После решения задачи вся временная информация, сгенерированная в процессе решения этой <i>задачи</i> и имеющая ценность только в контексте решения указанной <i>задачи</i>, должна быть удалена из памяти.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*)
					};;
				*);
				[<p><i><b>гибридный решатель</b></i> должен обеспечивать возможность <b>согласованного использования различных моделей решения задач</b> при решении одной и той же <i>комплексной задачи</i> в случае необходимости.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p><i>решатель задач</i> должен быть легко <b>модифицируемым</b>, то есть трудоемкость внесения изменений в уже разработанный <i>решатель задач</i> должна быть минимальна. Путями повышения модифицируемости <i>решателя задач</i> являются обеспечение локальности вносимых изменений, в том числе --- за счет стратификации <i>решателя задач</i> на независимые уровни и обеспечение максимальной независимости компонентов <i>решателя задач</i> друг от друга, а также наличие готовых компонентов, которые могут быть встроены в <i>решатель задач</i> при необходимости. При этом внесение изменений должно осуществляться <i>непосредственно в процессе эксплуатации системы</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Для того чтобы <i>интеллектуальная система</i> имела возможность анализировать и оптимизировать имеющийся <i>решатель задач</i>, интегрировать в его состав новые компоненты (в том числе самостоятельно), оценивать важность тех или иных компонентов и применимость их для решения той или иной задачи, спецификация <i>решателя задач</i> должна быть описана языком, понятным системе, например, при помощи тех же средств, что и обрабатываемые <i>знания</i>. Другими словами, <i>интеллектуальная система</i> и, соответственно, <i>решатель задач</i> должны обладать <i>рефлексивностью</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			;;

			.system_element_1175
			=> .system_element_162: [<p>Несмотря на то что в настоящее время существует большое число <i>моделей решения задач</i>, многие из которых реализованы и успешно используются на практике в различных системах, остается актуальной проблема низкой согласованности принципов, лежащих в основе реализации таких моделей, и отсутствия единой унифицированной основы для реализации и интеграции различных <i>моделей решения задач</i>, что приводит к тому, что: затруднена возможность одновременного использования различных <i>моделей решения задач</i> в рамках одной системы при решении одной и той же комплексной задачи; практически невозможно комбинировать различные модели с целью решения <i>задачи</i>, для которой априори отсутствует <i>алгоритм</i> ее решения;

			<li> практически невозможно использовать технические решения, реализованные в одной системе, в других системах, то есть возможности использования компонентного подхода при построении <i>решателей задач</i> сильно ограничены. Как следствие, велико количество дублирований аналогичных решений в разных системах;

			<li> фактически отсутствуют комплексные методики и средства построения <i>решателей задач</i>, которые бы обеспечивали возможность проектирования, реализации и отладки <i>решателей задач</i> различного вида.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_840: 
					[<p>Высокая трудоемкость разработки каждого <i>решателя задач</i>, увеличение сроков их разработки, а значит, и увеличение затрат на разработку и поддержку соответствующих <i>интеллектуальных систем</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Высокая трудоемкость внесения изменений в уже разработанные <i>решатели задач</i>, то есть отсутствует или сильно затруднена возможность дополнения уже разработанного <i>решателя задач</i> новыми компонентами и внесения изменений в уже существующие компоненты в процессе эксплуатации системы. Таким образом, высока трудоемкость поддержки разработанных <i>решателей задач</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Высокий уровень профессиональных требований к разработчикам <i>решателей задач</i>, что обусловлено, в частности: Высокой сложностью существующих формализмов в области решения <i>задач</i>, рассчитанных на их интерпретацию <i>компьютерной системой</i>, а не человеком;
					<li> Отсутствием возможности рассматривать разрабатываемые <i>решатели задач</i> на разных уровнях детализации, выделения на каждом уровне достаточно независимых компонентов, что затрудняет процесс проектирования, тестирования и отладки таких <i>решателей задач</i>, а также снижает эффективность попыток объединения разработчиков <i>решателей задач</i> в коллективы по причине увеличения накладных расходов на согласование их деятельности;
					<li> Низким уровнем информационной поддержки разработчиков и автоматизации их <i>деятельности</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*)
				;;
				=> .system_element_6601: <
					[<p>Для решения перечисленных проблем необходимо разработать комплекс моделей, методики и средств разработки <i>гибридных решателей задач</i>, удовлетворяющих перечисленным ранее требованиям.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Исторически сложились два основных подхода к построению <i>решателей задач</i> <i>интеллектуальных компьютерных систем</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Первый подход предполагает наличие в системе фиксированного <i>решателя задач</i> (например, машины логического вывода), к которому впоследствии добавляется <i>база знаний</i>, наполнение которой определяется <i>предметной областью</i>, в которой должна работать система. Такие системы получили название "пустых" <i>экспертных систем</i> или "оболочек" (expert system shells). Данный подход, как правило, использовался для разработки относительно несложных систем и в настоящее время не имеет широкого применения.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
						=> .system_element_35: {
							.system_element_6544;
							.system_element_6543
						};;
					*);
					[<p>Второй подход, широко используемый в настоящее время, предполагает наличие программных средств доступа к информации, хранящейся в некоторой базе, совместимых с различными популярными <i>языками программирования</i>. Данный подход широко используется, например, в системах, построенных на основе стандартов <i>W3C</i>, таких как <i>RDF</i>, <i>OWL</i>, <i>SPARQL</i>, а также <i>графовых с.у.б.д.</i>, таких как <i>Neo4j</i>. Структура <i>решателя задач</i>, построенного на базе таких средств, определяется разработчиком в каждом конкретном случае и не фиксируется какими-либо стандартами. Такой подход обладает большей гибкостью, но отсутствие унификации в структуре и процессе разработки <i>решателей задач</i> приводит к отсутствию совместимости компонентов <i>решателей задач</i>, созданных разными разработчиками, большому количеству дублирований одних и тех же решений, повышению накладных расходов в процессе разработки и поддержки <i>решателя задач</i>. Также существует большое количество реализаций так называемых <i>ризонеров</i> (semantic reasoners), осуществляющих <i>логический вывод</i> на <i>онтологиях</i>, представленных в формате <i>OWL 2</i>, а также средств разработки и редактирования таких <i>онтологий</i>. Полный список таких средств, признанных консорциумом <i>W3C</i>, можно найти на сайте <i>OWLImplementations</i>. Как видно из приведенной на нем таблицы, подавляющее большинство средств способно осуществлять только прямой <i>логический вывод</i> на основе <i>отношений</i>, описанных в <i>онтологии</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
						=> .system_element_35: {
							.system_element_6545;
							.system_element_225;
							.system_element_6546;
							.system_element_6547;
							.system_element_6548;
							.system_element_6549
						};;
					*);
					[<p>Среди комплексных подходов к построению <i>решателей задач</i>, разрабатываемых русскоязычными авторами, можно выделить проект <i>IACPaaS</i>, активно развивающийся в настоящее время. Целью данного проекта является разработка облачной платформы для построения на ее основе <i>интеллектуальных сервисов</i> различного назначения. В данном проекте активно используются <i>библиотеки многократно используемых компонентов интеллектуальных систем</i>. Конкретно для построения <i>решателей задач</i>, а также <i>пользовательских интерфейсов</i> таких систем используется <i>многоагентный подход</i>. Несмотря на близость некоторых технологических решений, реализуемых в проекте <i>IACPaaS</i> и в рамках <i>Технологии OSTIS</i>, основной целью указанного проекта является предоставление пользователю большого числа разнородных сервисов, выбор которых осуществляется самим пользователем, в то время как одним из ключевых принципов <i>Технологии OSTIS</i> является разработка общей формальной основы для интеграции различных <i>моделей решения задач</i> с целью их комбинирования при решении одной и той же <i>комплексной задачи</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
						=> .system_element_35: {
							.system_element_417;
							.system_element_6550
						};;
					*);
					[<p>Задачи интеграции различных подходов, в том числе связанных с решением задач, исследуются также в работе <i>Phylyppov2016</i> и других работах тех же авторов.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
						=> .system_element_35: {
							.system_element_6551
						};;
					*);
					[<p>Компонентному проектированию <i>интеллектуальных систем, основанных на знаниях</i>, посвящена работа <i>Borisov2014</i>, в которой обосновывается необходимость накопления и повторного использования различных компонентов <i>интеллектуальных систем</i>, предлагаются возможные решения данной проблемы с использованием <i>онтологий</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
						=> .system_element_35: {
							.system_element_157
						};;
					*);
					[<p>Состояние работ англоязычных авторов, посвященных вопросам решения задач в <i>системах, основанных на знаниях</i>, и актуальных на момент начала 1990-х годах, отражено в обзорных публикациях <i>Dutta1993</i>, <i>Pau1990</i>. Более поздние англоязычные работы в данной области в основном ориентированы на решение конкретных частных <i>задач</i> в системах, построенных на основе стандартов <i>W3C</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
						=> .system_element_35: {
							.system_element_6552;
							.system_element_6553
						};;
					*);
					[<p>Таким образом, можно сказать, что существует ряд конкретных разработок в направлении построения <i>комплексных технологий разработки интеллектуальных систем</i> различных классов, в том числе с использованием <i>библиотек многократно используемых компонентов</i>, однако проблема разработки комплексной технологии построения <i>гибридных решателей задач</i> в рамках рассмотренных подходов не решена. Во многом это обусловлено отсутствием унифицированной формальной основы для представления любых <i>видов знаний</i>, в том числе различного рода программ, отсутствием строгих принципов, регламентирующих процесс построения <i>решателей задач</i>, а также средств поддержки разработчиков таких <i>решателей задач</i> и их компонентов.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*)
				>;;
			*);;
		*];;

		.system_element_6586
		=> nrel_inclusion: [*

			.system_element_6600
			=> .system_element_5464: 
				[<p>В качестве основы для построения модели гибридного <i>решателя задач</i> предлагается использовать <i>многоагентный подход</i>. Данный подход позволяет обеспечить основу для построения параллельных асинхронных систем, имеющих распределенную архитектуру, повысить модифицируемость и производительность разработанных <i>решателей задач</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Процесс решения любой <i>задачи</i> предлагается декомпозировать на <i>логически атомарные действия</i>, что также позволит обеспечить совместимость и модифицируемость <i>решателей задач</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p><i>решатель задач</i> (как объединенный, так и <i>решатель задач</i> частного вида) предлагается рассматривать как иерархическую систему, состоящую из нескольких взаимосвязанных уровней. Такой подход позволяет обеспечить возможность проектирования, отладки и верификации компонентов на разных уровнях независимо от других уровней, что существенно упрощает задачу построения <i>решателя задач</i> за счет снижения накладных расходов.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Предлагается записывать <i>всю</i> информацию о решателе и решаемых им задачах при помощи <i>SC-кода</i> в той же <i>базе знаний</i>, что и собственно предметные <i>знания</i> системы.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> nrel_inclusion: 
						[<p><i>Спецификация агентов</i>, входящих в состав <i>решателя задач</i>.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p><i>Спецификация методов</i>, интерпретируемых <i>агентами</i> <i>решателя задач</i>.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p>Спецификация всех <i>информационных процессов</i>, выполняемых агентами в <i>семантической памяти</i>, в том числе --- конструкции, обеспечивающие синхронизацию выполнения параллельных процессов.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p>Спецификация всех <i>задач</i>, на решение которых направлены указанные <i>информационные процессы</i>.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*)
					;;
					=> nrel_note: [<p>Описание всей указанной информации в единой семантической  памяти позволит, во-первых, обеспечить независимость разрабатываемых <i>решателей задач</i> от <i>ostis-платформы</i>, во-вторых, обеспечить возможность системы анализировать происходящие в ней процессы, оптимизировать и синхронизировать их выполнение, то есть обеспечить <i>рефлексивность</i> проектируемых <i>интеллектуальных систем</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
						=> .system_element_35: {
							.system_element_6602
						};;
					*);;
				*)
			;;

			.system_element_5485
			=> nrel_note: [<p>Ориентация на <i>многоагентный подход</i> как основа для построения <i>гибридных решателей задач</i> обусловлена следующими основными преимуществами и принципами такого подхода.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> .system_element_5464: 
				[<p>Автономность (независимость) <i>агентов</i> в рамках такой системы, что позволяет локализовать изменения, вносимые в <i>решатель задач</i> при его эволюции, и снизить соответствующие трудозатраты, а также обеспечить устойчивость такой системы к отказам некоторых агентов.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Децентрализация обработки, то есть отсутствие единого контролирующего центра, что также позволяет локализовать вносимые в <i>решатель задач</i> изменения.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Возможность параллельной работы разных <i>информационных процессов</i>, соответствующих как одному <i>агенту</i>, так и разным агентам, как следствие, --- возможность распределенного решения задач. Однако возможность параллельного выполнения <i>информационных процессов</i> подразумевает наличие средств синхронизации такого выполнения, разработка которых является отдельной задачей и подробно рассматривается ниже.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Активность <i>агентов</i> и <i>многоагентной системы</i> в целом, дающая возможность при общении с такой системой не указывать явно способ решения поставленной <i>задачи</i>, а формулировать задачу в <b>декларативном ключе</b>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			;
			=> .system_element_35: {
				.system_element_5489
			};;

			.system_element_3128
			=> nrel_inclusion: .system_element_6603
			(*
				=> nrel_note: [<p><i>модель агента</i> входит в состав системы и включает классификацию <i>агентов</i> и набор понятий, характеризующих каждый агент в рамках системы. В настоящее время наиболее популярной является модель <i>BDI</i> (belief-desire-intention), в рамках которой предполагается описывать на соответствующих языках "убеждения", "желания" и "намерения" каждого агента системы.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
			*);
			=> nrel_inclusion: .system_element_6604
			(*
				=> .system_element_264: [<p><i>модель коммуникации агентов</i> --- это модель, в рамках которой находятся агенты, на события в которой они реагируют и в рамках которой могут осуществлять некоторые преобразования.</p>];;
				=> .system_element_35: {
					.system_element_6554
					(*
						=> nrel_note: [<p>Приводится обзор разновидностей сред для многоагентных систем.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);;
					*)
				};;
			*);
			=> nrel_inclusion: .system_element_6605
			(*
				=> .system_element_264: [<p><i>модель коммуникации агентов</i> --- это модель, в рамках которой уточняется язык взаимодействия <i>агентов</i> (структура и классификация сообщений) и способ передачи сообщений между <i>агентами</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
			*);;

			.system_element_6605
			=> nrel_inclusion: .system_element_6606
			(*
				=> .system_element_264: [<p>принципы обмена сообщениями между агентами --- это принципы, описывающие то, каким образом эти сообщения передаются от <i>агента</i> к <i>агенту</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
			*);
			=> nrel_inclusion: .system_element_6607
			(*
				=> .system_element_264: [<p><i>классификация, семантика и прагматика сообщениями между агентами</i> --- <i>смысл</i> передаваемой информации и цель такого взаимодействия.</p>];;
				=> nrel_note: [<p>В настоящее время стандартами, описывающими структуру передаваемых агентами сообщений, являются <i>Agent Communication Language</i> (<i>ACL</i>), разработанный сообществом <i>FIPA</i>, язык <i>KQML</i>. Указанные стандарты уточняют базовые компоненты каждого сообщения (кодировка, язык сообщения, используемую онтологию понятий, получателя, отправителя и так далее), не ограничивая при этом <i>смысл</i> сообщения в целом. Также для коммуникации между агентами используется язык <i>KIF</i>, предназначенный для обмена <i>знаниями</i> между любыми программными компонентами.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6555;
						.system_element_6557;
						.system_element_6556
					};;
				*);;
			*);
			=> nrel_inclusion: .system_element_6608
			(*
				=> nrel_note: [<p>В литературе рассматривается большое число вариантов координации деятельности <i>агентов</i>. В работе <i>Hartung2008</i> предлагается выделить агенты более высокого уровня (<i>метаагенты</i>), <i>задачей</i> которых является сбор информации от <i>агентов</i> нижнего уровня и их координация, схожие идеи высказываются в работе <i>Sims2008</i>. В работах <i>Excelente-Toledo2004</i>, <i>NagendraPrasad1999</i> предлагаются варианты автоматического выбора оптимального механизма координации <i>агентов</i> для достижения общей цели. Предлагаются также социально-психологические модели координации деятельности <i>агентов</i>, например, на основе некоторых общих "законов" или эмоций. В работе <i>Gorodetsky2015</i> предложен вариант онтологии коллективного поведения автономных <i>агентов</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6564;
						.system_element_6561;
						.system_element_6560;
						.system_element_6559;
						.system_element_6558;
						.system_element_6563;
						.system_element_6562
					};;
				*);;
			*);;

			.system_element_3128
			=> .system_element_162: 
				[<p>Жесткая ориентация большинства средств на модель <i>BDI</i> приводит к существенным накладным расходам, связанным с необходимостью выражения конкретной практической <i>задачи</i> в системе понятий <i>BDI</i>. В то же время ориентация на модель <i>BDI</i> неявно провоцирует искусственное разделение языков, описывающих собственно компоненты <i>BDI</i> и знания <i>агента</i> о внешней среде, что приводит к отсутствию <i>унификации представления</i> и, соответственно, дополнительным накладным расходам.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Большинство современных средств построения <i>многоагентных систем</i> ориентированы на представление <i>знаний</i> <i>агента</i> при помощи узкоспециализированных языков, зачастую не предназначенных для представления <i>знаний</i> в широком смысле. Речь при этом идет как о знаниях агента о себе самом, так и <i>знаниях</i> о внешней среде. В некоторых подходах вначале строится онтология, для создания которой, однако, часто используются средства с низкой выразительной способностью, не предназначенные для построения <i>онтологий</i>. В конечном итоге такой подход приводит к сильной ограниченности возможностей построенных <i>многоагентных систем</i> и их несовместимости.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6570;
						.system_element_6571
					};;
				*);
				[<p>Абсолютное большинство современных средств предполагает, что взаимодействие <i>агентов</i> осуществляется путем обмена сообщениями непосредственно от <i>агента</i> к <i>агенту</i> или посредством специальных коммуникационных центров, например, в случае взаимодействия <i>агентов</i> в глобальной сети. Такой подход обладает существенным недостатком, связанным с тем, что в этом случае каждый <i>агент</i> системы должен иметь достаточно полную информацию о других агентах в системе, что приводит к дополнительным затратам ресурсов, кроме того, добавление или удаление одного или нескольких <i>агентов</i> приводит к необходимости оповещения об этом других <i>агентов</i>. Данная проблема решается путем организации общения агентов по принципу "доски объявлений", предполагающему, что сообщения помещаются в некоторую общую для всех агентов область, при этом каждый <i>агент</i> в общем случае может не знать, какому из агентов адресовано сообщение и от какого из <i>агентов</i> получено то или иное сообщение. Кроме того, в построенной таким образом системе легче обеспечивается параллельное решение несвязанных друг с другом <i>задач</i>, поскольку сообщения, относящиеся к одной <i>задаче</i>, будут игнорироваться агентами, решающими другую задачу. Однако данный подход не исключает проблему, связанную с необходимостью разработки специализированного языка взаимодействия <i>агентов</i>, который в общем случае не связан с языком, на котором описываются <i>знания</i> <i>агента</i> о решаемых <i>задачах</i> и окружающей среде.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6573;
						.system_element_6574
					};;
				*);
				[<p>Многие средства построения <i>многоагентных систем</i> построены таким образом, что логический уровень взаимодействия <i>агентов</i> жестко привязан к физическому уровню реализации <i>многоагентной системы</i>. Например, при передаче сообщений от агента к агенту разработчику <i>многоагентной системы</i> необходимо помимо семантически значимой информации указывать ip-адрес компьютера, на котором расположен <i>агент-получатель</i>, кодировку, с помощью которой закодирован текст сообщения, и другую техническую информацию, обусловленную исключительно особенностями текущей реализации средств.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>В большинстве подходов среда, с которой взаимодействуют <i>агенты</i>, уточняется отдельно разработчиком для каждой <i>многоагентной системы</i>, что с одной стороны, расширяет возможности применения соответствующих средств, но, с другой стороны, приводит к существенным накладным расходам и несовместимости таких многоагентных систем. Кроме того, в ряде случаев разработчик также обязан учитывать особенности технической реализации средств разработки в плане их стыковки с предполагаемой средой, в роли которой может выступать, например, локальная или глобальная сеть.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			;
			=> .system_element_35: {
				.system_element_6565;
				.system_element_6566;
				.system_element_6567;
				.system_element_6572;
				.system_element_6569;
				.system_element_6570;
				.system_element_6571;
				.system_element_6568
			};
			=> .system_element_6609: 
				[<p>Коммуникацию агентов предлагается осуществлять по принципу <i>"доски объявлений"</i>, однако в отличие от классического подхода в роли сообщений выступают спецификации в общей семантической памяти выполняемых <i>агентами</i> <i>действий</i>, направленных на решение каких-либо задач, а в роли среды коммуникации выступает сама эта <i>семантическая память</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				=> .system_element_840: 
					[<p>Исключить необходимость разработки специализированного языка для обмена сообщениями.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Обеспечить "обезличенность" общения, то есть каждый из <i>агентов</i> в общем случае не знает, какие еще агенты есть в системе, кем сформулирован и кому адресован тот или иной запрос. Таким образом, добавление или удаление агентов в систему не приводит к изменениям в других <i>агентах</i>, что обеспечивает модифицируемость всей системы.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Агентам, в том числе конечному пользователю, формулировать задачи в <i>декларативном ключе</i>, то есть не указывать для каждой задачи способ ее решения. Таким образом, агенту заранее не нужно знать, каким образом система решит ту или иную задачу, достаточно лишь специфицировать конечный результат.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);
					[<p>Сделать средства коммуникации <i>агентов</i> и синхронизации их деятельности более понятными разработчику и пользователю системы, не требующими изучения специальных низкоуровневых типов данных и форматов сообщений. Таким образом повышается доступность предлагаемых решений широкому кругу разработчиков.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*)
				
			;;

			.system_element_6610
			=> .system_element_6238: [<p>Следует отметить, что такой подход позволяет при необходимости организовать обмен сообщениями между <i>агентами</i> напрямую и, таким образом, может являться основой для моделирования многоагентных систем, предполагающих другие способы взаимодействия между <i>агентами</i>. в роли внешней среды для агентов выступает та же <i>семантическая память</i>, в которой формулируются задачи и посредством которой осуществляется взаимодействие <i>агентов</i>. Такой подход обеспечивает унификацию среды для различных систем <i>агентов</i>, что, в свою очередь, обеспечивает их совместимость;

			<li> спецификация каждого агента описывается средствами <i>SC-кода</i> в <i>базе знаний</i>, что позволяет: минимизировать число специализированных средств, необходимых для спецификации агентов, как языковых, так и инструментальных;

			<li> с одной стороны --- минимизировать необходимую в общем случае спецификацию агента, которая включает условие его инициирования и <i>программу</i>, описывающую алгоритм работы <i>агента</i>, с другой стороны --- обеспечить возможность произвольного расширения спецификации для каждого конкретного случая, в том числе возможность реализации модели <i>BDI</i> и других;

			<li> синхронизацию деятельности <i>агентов</i> предполагается осуществлять на уровне выполняемых ими процессов, направленных на решений тех или иных задач в <i>семантической памяти</i>. Таким образом, каждый агент трактуется как некий абстрактный процессор, способный решать задачи определенного класса. При таком подходе необходимо решить задачу обеспечения взаимодействия параллельных асинхронных процессов в общей <i>семантической памяти</i>, для решения которой можно заимствовать и адаптировать решения, применяемые в традиционной <i>линейной памяти</i>. При этом вводится дополнительный класс агентов --- <i>метаагенты</i>, задачей которых является решение возникающих проблемных ситуаций, таких как <i>взаимоблокировки</i>;

			<li> каждый <i>информационный процесс</i> в любой момент времени имеет ассоциативный доступ к необходимым фрагментам <i>базы знаний</i>, хранящейся в семантической памяти, за исключением фрагментов, заблокированных другими процессами в соответствии  с рассмотренным ниже механизмом синхронизации. Таким образом, с одной стороны, исключается необходимость хранения каждым агентом информации о внешней среде, с другой стороны, каждый <i>агент</i>, как и в классических <i>многоагентных системах</i>, обладает только частью всей информации, необходимой для решения задачи.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;

			.system_element_6600
			=> nrel_note: [<p>Важно отметить, что в общем случае невозможно априори предсказать, какие именно знания, модели и способы решения задач понадобятся системе для решения конкретной задачи. В связи с этим необходимо обеспечить, с одной стороны, возможность доступа ко всем необходимым фрагментам <i>базы знаний</i> (в пределе --- ко всей <i>базе знаний</i>), с другой стороны --- иметь возможность локализовать область поиска пути решения <i>задачи</i>, например, рамками одной <i>предметной области</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> nrel_note: [<p>Каждый из <i>агентов</i> обладает набором ключевых элементов (как правило, понятий), которые он использует в качестве отправных точек при ассоциативном поиске в рамках <i>базы знаний</i>. Набор таких элементов для каждого <i>агента</i> уточняется на этапах проектирования <i>решателя задач</i>. Уменьшение числа ключевых элементов <i>агента</i> делает его более универсальным, однако снижает эффективность его работы за счет необходимости выполнения дополнительных операций.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			=> .system_element_2911: [<p>Кроме <i>многоагентного подхода</i>, в основу принципов решения задачи в рамках <i>Технологии OSTIS</i> предлагается положить ряд идей, связанных с концепцией <i>ситуационного управления</i>, рассмотренной в работе <i>Д.А. Поспелова</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_35: {
					.system_element_6575
				};;
				=> .system_element_57: [<p>До настоящего времени попытки реализации указанной концепции, несмотря на ее актуальность и востребованность, сводились к частным решениям для конкретных <i>классов задач</i> и, к сожалению, не получили широкого распространения. В значительной степени это обусловлено отсутствием универсальной унифицированной основы, которая бы позволила на ее базе создавать языки ситуационного управления в применении к конкретным предметным областям и, что еще более важно, повторно использовать фрагменты описаний на таких языках.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_3668: [<p>Данную проблему можно решить используя предлагаемый в рамках <i>Технологии OSTIS</i> <i>SC-код</i> и семейство <i>онтологий верхнего уровня</i>, разработанных на его основе.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
						=> .system_element_35: technology_OSTIS
						(*
							=> .system_element_5464: 
								[<p><i>SC-код</i> как базовый язык для описания любой информации в <i>базе знаний</i> и, соответственно, для построения языков ситуационного управления на его основе.</p>]
								(*
									<- lang_ru;;
									=> nrel_format: format_html;;
								*);
								[<p><i>Базовая денотационная семантика <i>SC-кода</i></i>, которая позволяет обеспечить возможность формального уточнения всех используемых понятий в виде формального набора <i>онтологий</i>, что позволяет обеспечить совместимость разрабатываемых систем и возможность повторного использования их компонентов.</p>]
								(*
									<- lang_ru;;
									=> nrel_format: format_html;;
								*);
								[<p><i>агентно-ориентированный подход</i> к обработке информации, предполагающий реакцию <i>агентов</i> на возникновение в <i>базе знаний</i> определенных <i>ситуаций</i> и <i>событий</i>.</p>]
								(*
									<- lang_ru;;
									=> nrel_format: format_html;;
								*)
							;;
						*);;
					*);;
				*);;
			*);;

			.system_element_6611
			=> .system_element_2880: 
				[<p>Поскольку обработка осуществляется <i>агентами</i>, которые обмениваются сообщениями только через общую память, добавление нового агента или исключение (деактивация) одного или нескольких существующих <i>агентов</i>, как правило, не приводит к изменениям в других <i>агентах</i>, поскольку агенты не обмениваются сообщениями напрямую.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Инициирование <i>агентов</i> осуществляется децентрализованно и чаще всего независимо друг от друга, таким образом, даже существенное расширение числа агентов в рамках одной системы не приводит к ухудшению ее производительности.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Спецификации <i>агентов</i> и, как будет показано ниже, их программы могут быть записаны на том же языке, что и обрабатываемые знания, что существенно сокращает перечень специализированных средств, предназначенных для проектирования таких <i>агентов</i> и их коллективов, а также их анализа, верификации и оптимизации, и упрощает разработку системы за счет использования более универсальных компонентов.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			;;
		*];;
	*];;

	.system_element_414
	=> nrel_idtf: [<p>совокупность всех навыков, которыми обладает ostis-система на текущий момент времени</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>иерархическая система навыков, которыми обладает ostis-система</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= nrel_set_of_subsets: .system_element_745;
	=> nrel_note: [<p>С учетом того тезиса, что существуют <i>методы</i> интепретации других <i>методов</i> и, следовательно, иерархия <i>методов</i>, а также, соответственно, иерархия <i>навыков</i>, можно уточнить и понятие решателя задач, как <u>иерархической системы навыков</u>. Таким образом, определим <i>решатель задач ostis-системы</i> определяется как совокупность всех <i>навыков</i>, которыми обладает ostis-система на текущий момент времени.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Предлагаемый в рамках <i>Технологии OSTIS</i> подход к построению решателей задач позволяет обеспечить их модифицируемость, что, в свою очередь, позволяет <i>ostis-системе</i> при необходимости легко приобретать новые <i>навыки</i>, модифицировать (совершенствовать) уже имеющиеся и даже избавляться от некоторых навыков с целью повышения производительности системы. Таким образом, имеет смысл говорить не о жестко фиксированном решателе задач, который разрабатывается один раз при создании первой версии системы и далее не меняется, а о совокупности навыков, фиксированной в каждый текущий момент времени, но постоянно эволюционирующей.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_inclusion: .system_element_6612
	(*
		=> nrel_idtf: [<p>полный решатель задач ostis-системы</p>];;
		=> nrel_idtf: [<p>интегрированный решатель задач ostis-системы</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_idtf: [<p>решатель задач ostis-системы, реализующий все ее функциональные возможности, как основные, так и вспомогательные</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_explanation: [<p>В общем случае <i>объединенный решатель задач ostis-системы</i> решает задачи, связанные с: обеспечением основных функциональных возможностей системы (например, решение явно сформулированных задач по требованию пользователя);
		<li> обеспечением корректности и оптимизацией работы самой ostis-системы (перманентно на протяжении всего жизненного цикла ostis-системы);
		<li> обеспечением повышения квалификации конечных пользователей и разработчиков ostis-системы;
		<li> обеспечением автоматизации развития и управления развитием ostis-системы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_6613
	(*
		=> nrel_idtf: [<p>решатель задач ostis-системы, реализующий две и более модели решения задач</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	.system_element_6521
	<= nrel_inclusion: sc_agent;
	=> nrel_explanation: [<p>Под <i>машиной обработки знаний</i> будем понимать совокупность интерпретаторов всех <i>навыков</i>, составляющих некоторый <i>решатель задач</i>. С учетом многоагентного подхода к обработке информации, используемого в рамках Технологии OSTIS, <i>машина обработки знаний</i> представляет собой <i>sc-агент</i> (чаще всего --- <i>неатомарный sc-агент</i>), в состав которого входят более простые sc-агенты, обеспечивающие интерпретацию соответствующего множества <i>методов</i>. Таким образом, <i>машина обработки знаний</i> в общем случае представляет собой иерархическую систему <i>sc-агентов</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_414
	-> metasystem_problem_solver;
	=> nrel_inclusion: .system_element_6614
	(*
		=> nrel_inclusion: .system_element_6615
		(*
			=> nrel_subdividing: {
				.system_element_6616;
				.system_element_6617;
				.system_element_6618
			};;
		*);;
		=> nrel_inclusion: .system_element_6619
		(*
			=> nrel_inclusion: .system_element_6620
			(*
				=> nrel_inclusion: .system_element_6621
				(*
					=> nrel_inclusion: .system_element_6622
					(*
						=> nrel_inclusion: .system_element_6623;;
						=> nrel_inclusion: .system_element_6624;;
					*);;
					=> nrel_inclusion: .system_element_6625;;
					=> nrel_inclusion: .system_element_6626;;
				*);;
			*);;
			=> nrel_inclusion: .system_element_6627
			(*
				=> nrel_subdividing: {
					.system_element_6628;
					.system_element_6629
				};;
			*);;
		*);;
		=> nrel_inclusion: .system_element_6630;;
	*);
	=> nrel_inclusion: .system_element_6631;;

	.system_element_6632
	=> nrel_inclusion: [*

		.system_element_414
		=> nrel_inclusion: .system_element_6633
		(*
			=> nrel_idtf: [<p>решатель, способный решать задачи тех классов, для которых на данный момент времени известен соответствующий метод решения</p>];;
			=> nrel_inclusion: .system_element_6634;;
			=> nrel_inclusion: .system_element_6635;;
			=> nrel_inclusion: .system_element_6636
			(*
				=> nrel_inclusion: .system_element_6637;;
				=> nrel_inclusion: .system_element_6638;;
			*);;
			=> nrel_inclusion: .system_element_6639
			(*
				=> nrel_inclusion: .system_element_6640;;
				=> nrel_inclusion: .system_element_6641;;
			*);;
		*);
		=> nrel_inclusion: .system_element_6642
		(*
			=> nrel_idtf: [<p>решатель, реализующий стратегии решения задач, позволяющие породить метод решения задачи, который в текущий момент времени не известен ostis-системе</p>];;
			=> nrel_idtf: [<p>решатель, использующий для решения задач метаметоды, соответствующие более общим классам задач по отношению к заданной</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
			=> nrel_idtf: [<p>решатель задач, позволяющий породить метод, который является частным по отношению к какому-либо известному ostis-системе методу и интерпретируется соответствующей машиной обработки знаний</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
			=> nrel_inclusion: .system_element_6643;;
			=> nrel_inclusion: .system_element_6644;;
			=> nrel_inclusion: .system_element_6645;;
			=> nrel_inclusion: .system_element_6646;;
			=> nrel_inclusion: .system_element_6647;;
			=> nrel_inclusion: .system_element_6648;;
		*);;
	*];;

	.system_element_6649
	=> nrel_inclusion: [*

		.system_element_6521
		=> nrel_inclusion: .system_element_6454
		(*
			=> nrel_inclusion: .system_element_6650
			(*
				=> nrel_inclusion: .system_element_6651;;
				=> nrel_inclusion: .system_element_6652;;
			*);;
			=> nrel_inclusion: .system_element_6653;;
			=> nrel_inclusion: .system_element_6654;;
			=> nrel_inclusion: .system_element_6655;;
			=> nrel_inclusion: .system_element_6656;;
			=> nrel_inclusion: .system_element_6657;;
		*);;
	*];;

	.system_element_6658
	=> nrel_inclusion: [*

		.system_element_414
		=> nrel_inclusion: .system_element_6659
		(*
			=> nrel_subdividing: {
				.system_element_6660;
				.system_element_6661
			};;
		*);
		=> nrel_inclusion: .system_element_6662
		(*
			=> nrel_idtf: [<p>решатель задач, для которых явно сформулирована цель</p>];;
			=> nrel_inclusion: .system_element_6663;;
			=> nrel_inclusion: .system_element_6664;;
			=> nrel_inclusion: .system_element_6665;;
			=> nrel_inclusion: .system_element_6666;;
			=> nrel_inclusion: .system_element_6667
			(*
				=> nrel_inclusion: .system_element_6668;;
			*);;
		*);
		=> nrel_inclusion: .system_element_6669
		(*
			=> nrel_inclusion: .system_element_6670;;
			=> nrel_inclusion: .system_element_6671;;
		*);
		=> nrel_inclusion: .system_element_6672
		(*
			=> nrel_inclusion: .system_element_6673;;
			=> nrel_inclusion: .system_element_6674;;
			=> nrel_inclusion: .system_element_6675
			(*
				=> nrel_inclusion: .system_element_6676;;
			*);;
		*);
		=> nrel_inclusion: .system_element_6677
		(*
			=> nrel_inclusion: .system_element_6678
			(*
				=> nrel_inclusion: .system_element_6679;;
				=> nrel_inclusion: .system_element_6680;;
			*);;
			=> nrel_inclusion: .system_element_6681
			(*
				=> nrel_inclusion: .system_element_6682;;
				=> nrel_inclusion: .system_element_6683;;
			*);;
			=> nrel_inclusion: .system_element_6684
			(*
				=> nrel_inclusion: .system_element_6685
				(*
					=> nrel_inclusion: .system_element_6686;;
				*);;
			*);;
		*);;
	*];;

	.system_element_3388
	=> nrel_note: [<p><i>Язык SCP</i> позволяет установить границу между логико-семантической моделью <i>ostis-системы</i> и <i>ostis-платформой</i>. В связи с этим будем считать платформенно-независимыми <i>абстрактные sc-агенты</i>, реализованные на <i>Языке SCP</i> или более высокоуровневых языках на его основе, а платформенно-зависимыми <i>абстрактные sc-агенты</i>, которые реализованы на уровне <i>ostis-платформы</i> (например, с целью повышения их производительности). В то же время существует ряд <i>абстрактных sc-агентов</i>, которые принципиально не могут быть реализованы на <i>Языке SCP</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_6687
	=> nrel_inclusion: [*
		=> nrel_note: [<p>В предметной области был детально рассмотрен подход к построению <i>решателей задач</i>, позволяющий решить ряд фундаментальных проблем в области построения <i>решателей задач</i>, таких как обеспечение совместимости различных <i>решателей задач</i> и их компонентов, а также обеспечение обучаемости (модифицируемости и рефлексивности) самих <i>решателей задач</i>. В то же время существует существует ряд проблем, остающихся актуальными и требующих решения.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		=> nrel_subdividing: {
			[<p>Первая проблема связана с отсутствием достаточно строгой формализованной классификации задач, решаемых интеллектуальными системами, отсутствием унификации описания задач и классов задач, описания целей, хода и результата решения задачи, методов решения задач, связей между классами задач и методами решения задач данного класса. Решение данной проблемы, с одной стороны, позволит обеспечить возможность глубокой интеграции всевозможных <i>моделей решения задач</i> различных классов и возможность облегчить процесс интеграции новых моделей решения задач в интеллектуальную систему, а с другой стороны, станет предпосылкой для решения других проблем, описанных ниже.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Вторая проблема заключается в том, что на настоящий момент основное внимание в области разработки <i>гибридных решателей задач</i> уделено снижению трудоемкости интеграции различных компонентов решателя задач в <i>интеллектуальную систему</i> и реализации возможности накопления многократно используемых компонентов <i>решателей задач</i>, однако в общем случае не говорится о том, как конкретно <i>интеллектуальная система</i> будет применять те или иные компоненты при решении задач конкретных классов. Таким образом, построение общего плана решения задачи, то есть выбор методов решения задач, определение порядка их применения и выбор исходных данных (аргументов) для применения того или иного метода, фактически определяется разработчиком на этапе проектирования системы или на этапе ее эволюции в процессе эксплуатации. Предпосылкой для решения данной проблемы является решение ранее рассмотренной проблемы унификации представления задач различных классов и методов их решения. Решение же рассматриваемой проблемы предполагает разработку комплекса <i>стратегий решения задач</i> (или <i>метаметодов решения задач</i>), которые позволят <i>интеллектуальной системе</i> самостоятельно формировать план решения задачи с учетом имеющихся в системе методов решения задач и, при возможности, даже запрашивать недостающие для решения задачи компоненты в соответствующих библиотеках. Следует отметить, что попытки разработки универсальных высокоуровневых подходов к решению задач предпринимались еще на заре развития <i>Искусственного интеллекта</i>, в 1950-60ые годы, однако не увенчались успехов и вскоре прекратились. Во многом это связано с отсутствием на тот момент унифицированных моделей представления и обработки знаний, которые в настоящий момент предлагаются в рамках <i>Технологии OSTIS</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Еще одна актуальная проблема, тесно связанная с рассмотренными выше, заключается в том, что интеллектуальные системы часто вынуждены решать задачи в условиях так называемых не-факторов, то есть неполноты описания задачи и возможных путей ее решения, нечеткости и некорректности имеющихся знаний, отсутствия критериев для оценки оптимальности полученного решения и т.д. В особенности это актуально при решении поведенческих задач, связанных с изменением состояния объектов среды, внешней по отношению к интеллектуальной системе. Для решения задач в подобных условиях интеллектуальная система должна не только обладать достаточным набором компонентов решателя задач, реализующих модели решения задач в условиях наличия не-факторов (нечеткие логические модели, модели машинного обучения, генетические алгоритмы и так далее), но и реализовывать <i>стратегии решения задач</i>, которые бы позволили принимать решения и формировать <i>план решения задачи</i> в такого рода условиях.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_35: {
					.system_element_53
				};;
			*);
			[<p>В случае же распределенного коллектива интеллектуальных систем важнейшей проблемой является не просто обеспечение возможности решения задач таким коллективом в текущий момент времени, а перманентная поддержка семантической совместимости и, как следствие, интероперабельности систем, входящих в такой коллектив на протяжении всего их жизненного цикла. Очевидно, что каждая из систем, входящих в такой коллектив, и, соответственно, ее <i>решатель задач</i> может эволюционировать независимо от других систем, но при этом всегда должна сохраняться <i>интероперабельность</i> между системами, в противном случае решение задач в таком коллективе станет невозможным. Решение данной проблемы предполагает разработку методов перманентного анализа <i>семантической совместимости</i> распределенного коллектива взаимодействующих интеллектуальных систем, выявления и устранения проблем.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*)
		}
		(*
			=> .system_element_6601: 
				[<p>Необходимо разработать комплексную онтологию действий, задач и методов их решения, а также онтологию <i>гибридных решателей задач</i> на основе которой уточнить понятие решателя и его архитектуру. На основе первой версии <i>Глобальной предметной области действий и задач и соответствующей ей онтологии методов и технологий</i> предлагается разработать комплексную онтологию действий и задач, решаемых <i>ostis-системами</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6688
					};;
				*);
				[<p>Необходимо разработать комплекс унифицированных обобщенных стратегий (метаметодов) решения задач в интеллектуальных системах, позволяющий интеллектуальной системе самостоятельно формировать план решения задачи с учетом имеющихся в системе <i>методов решения задач</i>. В основу разрабатываемых стратегий кроме опыта аналогичных работ предлагается внести также некоторые общеметодологические идеи, связанные с <i>Теорией бихевиоризма</i> и набирающими популярность идеями ее применения в информатике, ТРИЗ, а также <i>СМД-методологией</i>, предложенной школой Г. П. Щедровицкого.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6581;
						.system_element_6582;
						.system_element_6579;
						.system_element_6580;
						.system_element_6583
					};;
				*);
				[<p>Необходимо разработать онтологическую модель формирования плана решения задачи и управления процессом решения задач в гибридных решателях задач в условиях различных не-факторов и отсутствия четких критериев оценки оптимальности полученного решения. Для разработки данной модели предлагается адаптировать теорию <i>ситуационного управления</i>, и реализовать ее в контексте семантической теории <i>решателей задач</i>, разрабатываемой в рамках <i>Технологии OSTIS</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6575
					};;
				*);
				[<p>Необходимо разработать комплексную онтологическую модель управления информационными процессами решения задач в интеллектуальных системах, построенных на базе унифицированных семантических моделей представления и обработки информации.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Необходимо разработать онтологическую модель платформы интерпретации унифицированных семантических моделей представления и обработки информации (<i>ostis-платформы</i>).</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6602
					};;
				*);
				[<p>Необходимо разработать комплексную иерархическую модель <i>гибридного решателя задач</i>, основанную на многоагентном подходе и учитывающую необходимость решения задач как в рамках одиночных интеллектуальных систем, так и в рамках <u>распределенных</u> <u>коллективов интероперабельных</u> <u>интеллектуальных систем</u>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Необходимо разработать комплекс методов анализа качества <i>гибридных решателей задач</i> и их компонентов.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Необходимо разработать комплекс методик и средств поддержки проектирования <i>гибридных решателей задач</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6689
					};;
				*)
			;;
			=> nrel_note: [<p>Рассмотренные проблемы связаны в первую очередь с процессом решения конкретной задачи интеллектуальной системой. В то же время очевидно, что в каждый момент времени интеллектуальная система вынуждена параллельно решать несколько задач, которые могут быть связаны как с непосредственным функциональным назначением системы, так и с обеспечением жизнедеятельности и эволюции самой системы. Во втором случае имеются в виду, в частности, задачи, связанные с актуализацией имеющихся у нее сведений о внешнем мире, поиском и устранением ошибок в базе знаний, оптимизацией структуры <i>базы знаний</i> и <i>решателя задач</i> системы, поиском и устранением информационного мусора и многие другие. При этом разные задачи могут иметь разный приоритет, который может меняться в зависимости от ситуации даже в процессе ее решения. В то же время, в ситуации, когда априори не известно, какой из возможных способов решения задачи окажется наиболее эффективным, может оказаться целесообразным параллельное использование нескольких подходов к решению одной и той же задачи. Таким образом, актуальной является проблема организации управления информационными процессами решения задач в интеллектуальной системе и взаимодействия параллельно выполняемых информационных процессов с учетом приоритетности процессов, возможности отслеживать текущее состояние <i>информационных процессов</i>, порождать, приостанавливать и уничтожать информационные процессы. Для решения данной проблемы целесообразно заимствовать решения, широко используемые в традиционных компьютерных системах, в частности, реализуемые в современных операционных системах, и адаптировать их к специфике решения задач в интеллектуальных системах. Важно отметить, что реализация модели управления информационными процессами на основе общих унифицированных моделей обработки информации, предлагаемых в рамках <i>Технологии OSTIS</i>, позволит сделать одни информационные процессы объектом анализа других информационных процессов, что, в свою очередь, даст возможность анализировать ход решения задачи непосредственно в процессе решения, оценивать эффективность тех или иных методов решения задач, накапливать наиболее удачные решения для применения в дальнейшем для решения аналогичных задач и многое другое.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
			=> nrel_note: <
				[<p>Решение перечисленных проблем позволит разработать принципиально новую иерархическую модель <i>гибридного решателя задач</i>, обладающую рядом существенных преимуществ, которая, в свою очередь, должна будет интерпретироваться на каких-либо платформах. Без унификации требований к <i>ostis-платформе</i> и четкого разделения платформенно-независимой модели системы (и в частности решателя) и <i>ostis-платформы</i> невозможно говорить о реализации модели <i>решателя задач</i>, реализующей рассмотренные выше идеи. Это приведет к необходимости дублирования одних и тех же компонентов модели для разных платформ, значительно усложнит интеграцию компонентов <i>решателя задач</i>, поскольку потребует учета при такой интеграции особенностей каждой <i>ostis-платформы</i>. Кроме того, четкое разделение уровня модели системы и уровня <i>ostis-платформы</i> даст возможность независимо друг от друга развивать различные платформы и модели интеллектуальных систем. Таким образом, предлагается сформулировать унифицированные требования к <i>ostis-платформе</i>, а также построить общую модель такой <i>ostis-платформы</i>, удовлетворяющую указанным требованиям.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6602
					};;
				*);
				[<p>С другой стороны, как уже было сказано, <i>решатель задач</i> представляет собой сложную систему, ориентированную на работу со знаниями, а не с данными, в отличие от современных программных систем, в которых изначально известно, где конкретно локализованы нужные данные и в какой форме они представлены. В связи с этим, применение для разработки интеллектуальных систем современных программно-аппаратных платформ, ориентированных на адресный доступ к хранящимся в памяти данным, не всегда оказывается эффективным, поскольку при разработке интеллектуальных систем фактически приходится моделировать нелинейную память на базе линейной. Повышение эффективности решения задач интеллектуальными системами требует разработки специализированных платформ, в том числе аппаратных, ориентированных на унифицированные семантические модели представления и обработки информации. В качестве основы для таких разработок предлагается использовать предложенную в рамках <i>Технологии OSTIS</i> общую концепцию <i>ассоциативного семантического компьютера</i>, <i>семантической памяти</i> и базового языка программирования, ориентированного на обработку информации в такой памяти, и дополнить их идеями <i>волновых языков программирования</i>, <i>инсерционного программирования</i> и других подходов, направленными на повышение эффективности обработки знаний, в том числе на аппаратном уровне.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> .system_element_35: {
						.system_element_6690
					};;
				*)
			>;;
		*);;
	*];;

	.system_element_6691
	=> nrel_note: [<p>Разработка <i>решателей задач</i> <i>интеллектуальных систем</i> на настоящий момент как правило рассматриваются в контексте одиночных (самостоятельных) интеллектуальных систем, функционирующих в некоторой среде (частью которой является и пользователь, если он есть). В то же время очевидна тенденция современных информационных технологий к переходу от одиночных систем к коллективам распределенных взаимодействующих компьютерных систем, в частности, к распределенному хранению данных и распределенным вычислениям.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_subdividing: {
		[<p>В случае интеллектуальных компьютерных систем важнейшим свойством систем, входящих в такие коллективы, становится <u><i>интероперабельность</i></u>, то есть способность системы к согласованному взаимодействию с другими подобными системами с целью решения каких-либо задач. Таким образом, особо актуальным является переход от разработки <i>решателей задач</i> отдельно взятых интеллектуальных систем к решателям задач взаимодействующих <i>интероперабельных интеллектуальных систем</i>, включая разработку принципов решения задач в таких распределенных коллективах с учетом решения всех обозначенных выше проблем.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Важно отметить, что полностью отказаться от распределенности при решении задач даже в сравнительно простых прикладных системах нельзя, поскольку часто интеллектуальные системы вынуждены использовать различные датчики и эффекторы, которые с точки зрения общей архитектуры являются некоторыми внешними модулями (внешними агентами) и, таким образом, привносят распределенность в общую архитектуру системы.Для решения данной проблемы предлагается рассмотреть такую систему взаимодействующих <i>интеллектуальных компьютерных систем</i> как <i>многоагентную систему</i> и уточнить принцип поведения <i>агентов</i> в такой системе.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Таким образом, можно говорить о двух видах многоагентных систем в рамках <i>Технологии OSTIS</i>: внутренняя система sc-агентов над общей sc-памятью в рамках некоторой ostis-системы;
		<li> распределенная система ostis-систем в рамках Экосистемы OSTIS.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>В обоих случаях можно говорить об <u>иерархии агентов</u>: в рамках внутренней системы sc-агентов выделяются <i>атомарные абстрактные sc-агенты</i> и <i>неатомарные абстрактные sc-агенты</i>, кроме того существует иерархия sc-агентов с точки зрения языка интерпретации методов;
		<li> в рамках <i>Экосистемы OSTIS</i> выделяются как <i>индивидуальные ostis-системы</i>, так и <i>коллективные ostis-системы</i>, которые в свою очередь могут состоять как из <i>индивидуальных ostis-систем</i>, так и <i>коллективных ostis-систем</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_35: {
				.system_element_5277;
				.system_element_6692
			};;
		*);
		[<p>Ключевым отличием <i>распределенной системы ostis-систем</i> от <i>внутренней системы sc-агентов</i> в рамках <i>индивидуальной ostis-системы</i> является отсутствие общей памяти, хранящей общую для всех <i>sc-агентов</i> <i>базу знаний</i> и выступающей в роли среды для коммуникации <i>sc-агентов</i>. В общем случае в качестве средства коммуникации между агентами в рамках выделенных систем агентов может использоваться: Общая нераспределенная (монолитная) память, как в случае <i>sc-агентов</i> над <i>sc-памятью</i>;
		<li> Общая распределенная память. В этом случае с логической точки зрения агенты могут считать, что по-прежнему работают над общей памятью, в рамках которой хранится вся доступная база знаний, однако реально <i>база знаний</i> будет распределена между несколькими <i>ostis-системами</i> и выполняемые преобразования должны будут синхронизироваться между этими ostis-системами;
		<li> Специализированные каналы связи. Очевидно, что при решении задачи в распределенном коллективе <i>ostis-систем</i> должны существовать языковые и технические средства, позволяющие осуществлять передачу сообщений от одной <i>ostis-системы</i> к другой.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Все перечисленные средства коммуникации в зависимости от класса решаемой задачи, требуемых для ее решения <i>знаний</i> и <i>навыков</i>, а также существующего (доступного) в данный момент набора <i>ostis-систем</i> могут <u>комбинироваться</u>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>В основу решения задач в рамках <i>распределенного коллектива ostis-систем</i> предлагается положить идею максимально возможной <u>унификации</u> и <u>конвергенции</u> принципов решения задач в рамках <i>индивидуальной ostis-системы</i> и <i>распределенного коллектива ostis-систем</i>. Такой подход обладает следующим важным достоинством: если общие принципы решения задач не зависят от того, какой конкретно набор <i>ostis-систе</i>м участвует в решении той или иной задачи, то становится возможным легко переходить от <i>индивидуальной ostis-системы</i> к <i>распределенному коллективу ostis-систем</i> при ее усложнении без необходимости существенно пересматривать коллектив <i>агентов</i>, входящих в состав такой <i>ostis-системы</i> и заново продумывать используемый подход к решению задач того или иного класса.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Для перехода от <i>индивидуальной ostis-системы</i> к <i>коллективной ostis-системе</i> достаточно выполнить несколько шагов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> nrel_subdividing: {
				[<p>Разделить множество классов задач, решаемых данной <i>ostis-системой</i>, на семейство подмножеств, каждое из которых обладает некоторой логической целостностью, критерии которой в общем случае определяются разработчиком. При этом указанные подмножества могут пересекаться, но при объединении должны давать исходное множество, таким образом необходимо построить одно из возможных <i>покрытий*</i> для множества классов задач, решаемых данной <i>ostis-системой</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Для каждого из выделенных подмножеств необходимо сформировать множество <i>знаний</i> и <i>навыков</i>, необходимых для решения задач данного множества классов. При этом в общем случае может оказаться необходимым пересмотр иерархии навыков и соответствующих им sc-агентов, в частности, преобразование некоторых атомарных sc-агентов в неатомарные. Теоретически избежать такой ситуации невозможно, однако подобные ситуации можно практически исключить на этапе проектирования решателей задач индивидуальных ostis-систем, делая иерархию агентов достаточно глубокой и ставя в соответствие <i>атомарным sc-агентам</i> такие <i>классы задач</i>, разделение которых на подклассы с практической точки зрения не имеет смысла. Аналогичная ситуация может возникнуть и при выделении фрагментов <i>базы знаний</i>. В этом случае может потребоваться пересмотр иерархии <i>предметных областей</i> и <i>онтологий</i> и, возможно, выделение новых предметных областей. Как и в случае с <i>решателями задач</i>, избежать такой ситуации на практике возможно в случае, если иерархия предметных областей будет достаточно глубокой для того, чтобы выделение более частных предметных областей было практически нецелесообразным.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Каждое сформированное таким образом множество знаний и навыков становится соответственно базой знаний и решателем задач новой ostis-системы, которая будет способна реализовать только часть функциональных возможностей исходной ostis-системы.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			};;
			=> nrel_note: [<p>Такое разделение может выполняться итерационно и для полученных <i>ostis-систем</i> в общем случае неограниченное количество раз, создавая на каждой итерации новое "поколение" ostis-систем, полученное путем декомпозиции исходной <i>ostis-системы</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		[<p>Таким образом, предлагаемая идея унификации принципов решения задач в <i>ostis-системах</i> любого рода позволяет  с практической точки зрения снять ограничение на расширение функциональных возможностей (обучение) не только <i>индивидуальной ostis-системы</i>, но и <i>коллективной ostis-системы</i>, позволяя, таким образом, постоянно наращивать функциональные возможности <i>Экосистемы OSTIS</i> в целом. 
		<li> с теоретической (архитектурной) точки зрения говорить о <u>фрактальном</u> характере не только внутренней организации <i>ostis-систем</i> но и <i>коллективов ostis-систем</i>, что, в свою очередь, позволяет обеспечить возможность наследования и других принципов построения <i>индивидуальных ostis-систем</i> в <i>распределенных коллективах ostis-систем</i>, включая, например, методику проектирования <i>ostis-систем</i> и их компонентов и соответствующие средства, а также принципы синхронизации соответствующих sc-агентам параллельных <i>информационных процессов</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>В основе взаимодействия <i>sc-агентов</i> в рамках <i>индивидуальной ostis-системы</i> лежит уточненный принцип "доски объявлений" при котором агенты взаимодействуют посредством общей для них sc-памяти. Для реализации той же идеи в случае <i>распределенной коллективной ostis-системы</i> необходимо выбрать какую-либо sc-память для выполнения данной роли.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>При решении задач в <i>распределенном коллективе ostis-систем</i> возможны два варианта организации взаимодействия <i>агентов</i> (которыми являются и сами <i>ostis-системы</i>)</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> nrel_subdividing: {
				[<p>Если решаемая задача достаточно сложная и требует частого обращения к нескольким отдельным <i>ostis-системам</i>, то целесообразно путем объединения раздельных ostis-систем создать <i>временную ostis-систему</i>, где все sc-агенты, входившие в состав исходных <i>ostis-систем</i>, становятся внутренними, и принципы организации их взаимодействия известны. В этом случае существенно снижаются затраты на решение задачи, но появляются накладные расходы на создание таких <i>временных ostis-систем</i>. Таким образом, необходимо отдельно разработать критерии на основании которых будет приниматься решение о целесообразности такого объединения. Отметим, что для того, чтобы иметь возможность сохранить результат и ход решения задачи для последующего применения целесообразно осуществлять объединение <i>ostis-систем</i> на базе одной из <i>ostis-систем</i>, входящих в такое объединение, а не создавать совершенно новую <i>ostis-систему</i>. При этом в такую систему будут копироваться знания и навыки из объединяемых систем, а сами эти объединяемые системы могут вообще никак не меняться. Тогда после решения задачи из исходной <i>ostis-системы</i> необходимо будет исключить те <i>навыки</i> и <i>знания</i>, которые были нужны только для решения данной задачи.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Важно отметить, что описанная интеграция <i>ostis-систем</i> благодаря особенностям их архитектуры выполняется значительно проще, чем в других компьютерных системах, поскольку принципы построения и баз знаний, и <i>решателей задач</i> <i>ostis-систем</i> изначально предполагают возможность неограниченного расширения имеющихся в системе знаний и навыков без необходимости внесения изменений в уже имеющуюся <i>базу знаний</i> и <i>решатель задач</i>. Таким образом, интеграция двух ostis-систем при условии их семантической совместимости сводится к обычному теоретико-множественному объединению их <i>баз знаний</i> и <i>решаталей задач</i> и последующему исключению продублированных компонентов. Благодаря этому создание таких временных ostis-систем может выполняться <u>автоматически</u>, что делает применение такого подхода к организации решения задач целесообразным во многих случаях.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Другой возможный вариант предполагает, что в качестве среды для взаимодействия <i>sc-агентов</i> (как внешних, так и внутренних, внешняя <i>ostis-система</i> с точки зрения процесса решения задачи также рассматривается как <i>sc-агент</i>) выбирается <i>sc-память</i> одной из <i>ostis-систем</i>, входящих в состав <i>коллектива ostis-систем</i>. Предлагаются следующие критерии выбора этой sc-памяти: Если задача решается неоднократно в рамках некоторого <i>ostis-сообщества</i> (<i>сообщества ostis-систем</i> и их пользователей), то для координации действий <i>sc-агентов</i> выбирается <i>sc-память</i> <i>корпоративной ostis-системы</i> для данного <i>ostis-сообщества</i>;
				<li> Если <i>коллектив ostis-систем</i> для решения данной задачи формируется временно (разово), то для координации действий <i>sc-агентов</i> выбирается <i>sc-память</i> той <i>ostis-системы</i>, которая инициировала решение данной задач.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Недостатком данного варианта является наличие затрат на коммуникацию между <i>ostis-системами</i>. Если по каким-либо причинам эти затраты велики (например, из-за низкого качества соединения между системами), то более целесообразно использовать первый из предложенных вариантов.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			};;
			=> .system_element_35: {
				.system_element_6586;
				.system_element_6693
			};;
		*);
		[<p>В любом из предложенных вариантов в конечном итоге определяется некоторая конкретная sc-память, которая становится средой для взаимодействия агентов, осуществляющих решение задачи, по изложенным принципам. Тогда можно уточнить понятие <i>sc-агента</i> как компонента решателя задач в контексте распределенного решения задач <i>коллективом ostis-систем</i> и считать sc-агентом не только компонент <i>решателя задач индивидуальной ostis-системы</i>, но и любую ostis-систему, входящую в постоянный либо временный <i>коллектив ostis-систем</i>, решающих какие-либо задачи, поскольку принципы взаимодействия <i>ostis-систем</i> в таком коллективе полностью совпадают с принципами взаимодействия <i>sc-агентов</i> в составе <i>решателя задач</i> <i>индивидуальной ostis-системы</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_35: {
				.system_element_6586
			};;
		*);
		[<p>Таким образом, можно говорить о фрактальной иерархической структуре распределенного <i>гибридного решателя задач</i>, в рамках которой выделяется два варианта иерархии <i>sc-агентов</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> nrel_subdividing: {
				[<p>Иерархия sc-агентов с точки зрения уровня <i>языков представления методов</i>, на которых представлены соответствующие этим sc-агентам методы. В рамках этой иерархии в свою очередь можно выделить три уровня, имеющих важные отличия.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> nrel_subdividing: {
						[<p>Уровень <i>sc-агентов</i> <i>ostis-платформы</i>, обеспечивающий интерпретацию методов платформенно-независимого уровня в рамках <i>индивидуальной ostis-системы</i>, в рамках которого может выделяться иерархия языков представления методов уровня ostis-платформы и соответствующих средств их интерпретации.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p>Уровень <i>платформенно-независимых sc-агентов</i> в рамках <i>индивидуальной ostis-системы</i>, в рамках которого может выделяться иерархия платформенно-независимых языков представления методов.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p>Уровень <i>распределенных коллективов ostis-систем</i>, на котором также можно говорить о <i>языках представления методов</i> и их иерархии, но при этом в общем случае даже отдельные методы могут физически храниться распределенно в разных ostis-системах. Например, можно говорить о <i>языке представления методов</i> для финансовой деятельности крупных предприятий, но при этом целесообразно выделять подъязыки для описания деятельности отделов различных категорий и иметь отдельные ostis-системы для обслуживания каждого из отделов.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*)
					};;
				*);
				[<p>Иерархия sc-агентов с точки зрения атомарности/неатомарности в рамках <u>одного</u> <i>языка представления методов</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
					=> nrel_note: [<p>Формирование такой иерархии может быть целесообразным на любом уровне языка <i>языка представления методов</i>.</p>]
					(*
						<- lang_ru;;
						=> nrel_format: format_html;;
					*);;
					=> nrel_subdividing: {
						[<p><i>атомарные платформенно-зависимые sc-агенты</i> и <i>неатомарные платформенно-зависимые sc-агенты</i> на уровне <i>ostis-платформы</i>.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p><i>атомарные платформенно-независимые sc-агенты</i> и <i>неатомарные платформенно-независимые sc-агенты</i> на платформенно-независимом уровне в рамках индивидуальной ostis-системы.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*);
						[<p><i>индивидуальные ostis-системы</i> и <i>коллективны ostis-систем</i> на уровне решения задач в рамках <i>Экосистемы OSTIS</i>.</p>]
						(*
							<- lang_ru;;
							=> nrel_format: format_html;;
						*)
					};;
				*)
			};;
		*);
		[<p>Дальнейшее развитие представленных принципов решения задач распределенными коллективами ostis-систем предполагает: Разработку формальных критериев для оценки целесообразности или нецелесообразности формирования временных индивидуальных ostis-систем.
		<li> Разработку языка и принципов обмена сообщениями между ostis-системами, входящими в коллектив ostis-систем, решающий какую-либо задачу. Несмотря на то, что с логической точки зрения каждая ostis-система трактуется как sc-агент и принципы их взаимодействия остаются теми же, реализация, например, возможности реагирования на события в базе знаний и внесения изменений в эту базу знаний для внутренних sc-агентов и внешних ostis-систем будет отличаться и требует уточнения.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};;
*];
=> nrel_conclusion: [<p>В данной предметной области рассмотрены актуальные на сегодняшний день проблемы в области разработки <i>гибридных решателей задач</i> и предложен общий подход к построению <i>гибридных решателей задач</i>, который решает такие проблемы, как обеспечение совместимости и модифицируемости <i>решателей задач</i>, а также создает предпосылки к решению других актуальных проблем.</p>]
(*
	<- lang_ru;;
	=> nrel_format: format_html;;
	=> .system_element_35: .system_element_6687;;
	=> .system_element_3580: 
		[<p>Более тесно и полно интегрировать идеи ситуационного управления в предлагаемый подход.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Доработать предложенный механизм блокировок, в частности, минимизировать число классов блокировок, учесть и реализовать идеи реализации lock-free алгоритмов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Исключить необходимость введения <i>sc-метаагентов</i> и <i>scp-метапрограмм</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Доработать <i>Язык SCP</i> до того, чтобы иметь возможность описывать в рамках <i>scp-программ</i> рецепторное и эффекторное взаимодействие <i>ostis-систем</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>При разработке <i>Абстрактной scp-машины</i> учесть принципы построения волновых языков программирования и идеи инсерционного программирования и моделирования.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_35: {
				.system_element_4723;
				.system_element_4724;
				.system_element_4722;
				.system_element_4721
			};;
		*)
	;;
*);;
