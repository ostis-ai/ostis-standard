.system_element_5539
=> nrel_inclusion: [*

	.system_element_6312
	<- subject_domain;
	=> nrel_authors: {
		.system_element_300;
		.system_element_301
	};
	<= .system_element_116: <
		.system_element_6238;
		.system_element_6239;
		.system_element_6240
	>;;

	.system_element_6238
	=> nrel_inclusion: [*
		<= .system_element_116: <
			.system_element_6313;
			.system_element_6314;
			.system_element_6315;
			.system_element_6316
		>;
		-> .system_element_112: 
			.system_element_5204;
			.system_element_6244;
			.system_element_4995;
			.system_element_4997;
			.system_element_6245;
			.system_element_6246;
			.system_element_6247;
			.system_element_6248
		;
		-> .system_element_756: 
			.system_element_6317;
			.system_element_1986
		;;

		.system_element_6318
		=> nrel_note: [<p><i>синтаксис</i> и <i>семантика метода</i> составляют <i>спецификацию*</i> этого <i>метода</i>. <i>Семантику метода</i> можно рассматривать в двух аспектах: как множество знаний, связанных между собой (то есть <i>денотационную семантику</i> данного <i>метода</i>), и как знание, которое может быть интерпретировано другим методом (то есть <i>операционную семантику</i> данного <i>метода</i>).</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*];;

	.system_element_6313
	=> nrel_inclusion: [*

		.system_element_465
		=> nrel_note: [<p>Любой <i>метод</i> состоит из <i>информационных конструкций</i>, которые задают порядок действий в базе знаний, с помощью которых нужно перейти от исходного состояния к <u>целевому</u>, решив таким образом какую-то конкретную задачу. Так, например, в процедурном методе любой такой оператор представляет собой некоторую математическую функцию. Для композиции этих функций в более крупные фрагменты используются выражения и операторы. В свою очередь, линейные последовательности операторов и условные ветвления также могут быть представлены функциями, составленными из функций отдельных компонентов этих конструкций. Цикл легко описывается рекурсивной функцией, составленной из компонентов, входящих в его тело.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6319
		=> nrel_note: [<p><i>Синтаксис языков представления методов</i> в ostis-системах может быть формально описан различными способами. Так, например, можно использовать метаязык Бэкуса-Наура для описания синтаксиса любых <i>языков представления методов</i>. Другими не менее известными формами представления методов являются контекстно-свободные грамматики, расширенная форма Бэкуса-Наура, синтаксические графы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_180: {
				.system_element_6267;
				.system_element_6266;
				.system_element_6249
			};;
			=> nrel_note: [<p>Однако значительно более логично и целесообразно описывать <i>синтаксис</i> других языков на универсальном <i>языке представления знаний</i> --- <i>SC-коде</i>. Такой подход позволит ostis-системам самостоятельно понимать, анализировать и генерировать тексты указанных языков на основе принципов, общих для любых форм внешнего представления информации, в том числе нелинейных. Таким образом, языки, написанные на <i>SC-коде</i>, имеют такой же синтаксис как и сам <i>SC-код</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_180: {
					.system_element_6265
				};;
			*);;
		*);;
	*];;

	.system_element_6314
	=> nrel_inclusion: [*

		.system_element_6320
		=> nrel_note: [<p><i>семантика метода</i> разъясняет смысл <i>синтаксических конструкций метода</i>. Наиболее распространенными методами описания семантики <i>языков программирования</i> являются: денотационной, операционный, аксиоматический, алгебраический. На базе принципов Технологии OSTIS, под семантикой метода будем подразумевать объединение <i>денотационной</i> и <i>операционной семантики метода</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_180: {
				.system_element_6268
			};;
		*);
		=> nrel_note: [<p>С помощью <i>SC-кода</i> можно представлять и те языки, которые не написаны на нем. Проблема будет в том, что форма и смысл языка и его методов будут разделены, то есть будут представлены по-разному. В данном случае <i>SC-код</i> выступает мощным инструментом для интеграции спецификаций различных языков внешнего представления знаний. Однако стоит отметить, что в представлении различных форм методов, принадлежащих разным <i>языкам представления методов</i>, в рамках <i>Технологии OSTIS</i> нет необходимости. Это объясняется тем, что: <i>SC-код</i> является достаточно универсальным языком для представления любых видов знаний. Это означает, что различные формы алгоритма решения одной и той же задачи можно свести к минимуму. В <i>SC-коде</i> фундаментом является формальная теория, что обеспечивает универсальное представление различных видов декларативных и процедурных знаний. Так, <i>логические программы</i> можно представлять в виде <i>процедурных программ</i>, в которых в качестве операндов операторов будут не только <i>логические формулы</i> и <i>правила вывода</i>, но и другие методы, обеспечивающее интерпретацию этих <i>логических формул</i> при помощи правил вывода. Таким образом, <i>SC-код</i> можно называть не только языком унифицированного представления знания, но и языком, на котором можно решать различные классы задачи одним и тем же способом.
		<li> Различные виды знаний в <i>ostis-системах</i>, проектируемые по принципам <i>Технологии OSTIS</i>, глубоко интегрированы между собой. Это дает не только простоту для создания этих систем на базе имеющихся языков, которые могут быть описаны на <i>SC-коде</i>, но большие возможности для создания базовых <i>языков программирования</i> для <i>программных компьютерных систем нового поколения</i> таких, как, например, <i>базового языка представления процедурных методов SCP</i>, <i>базового языка представления продукционных методов</i> и других. Современные <i>языки представления методов</i> создаются с целью упрощения описания какого-то алгоритма для быстрого и качественного решения определенного класса задач. В свою очередь, предлагаемые методики и модели позволяют проектировать <i>языки представления методов</i> для <i>компьютерных систем нового поколения</i> с помощью базовых <i>языков представления знаний</i> таким образом, чтобы сама форма представления знаний не менялась. Методы разных <i>языков представления методов</i> должны иметь одну универсальную форму представления, то есть один и тот же синтаксис, но могут давать возможности описывать и представлять разными способами <i>денотационную</i> и <i>операционную семантику</i> своих <i>методов</i> с помощью одного и того же синтаксиса.
		<li> Проектирование новых <i>языков представления методов</i> должно сводится к их полному описанию на минимальном семействе <i>языков SC-кода</i>: <i>SCP</i>, <i>SCL</i> и других. Речь идет о том, что чтобы спроектировать новый <i>язык представления методов</i> достаточно разработать (неатомарный) метаметод на языках <i>SCP</i> и <i>SCL</i>, который будет интерпретировать методы проектируемых языков, а также описать <i>денотационную семантику</i> этих методов. <i>Метаметод интерпретации методов языков представления методов</i> можно называть интерпретатором этих языков, то есть некоторой абстрактной sc-машиной, на которой возможно выполнение методов определенного <i>языка представления</i> этих <i>методов</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*];;

	.system_element_6315
	=> nrel_inclusion: [*

		.system_element_6321
		=> nrel_note: [<p>Полная <i>спецификация метода*</i> кроме <i>денотационной семантики этого метода*</i> должна включать <i>операционную семантику этого метода*</i>, то есть формальное описание интерпретатора заданного метода. <i>Операционная семантика языка представления методов</i> описывает выполнение <i>метода</i>, составленного на данном языке, средствами виртуального компьютера. Виртуальный компьютер определяется как абстрактный автомат. Внутренние состояния этого автомата моделируют состояния вычислительного процесса при выполнении метода. Автомат транслирует исходный текст метода в набор формально определенных операций. Этот набор задает переходы автомата из исходного состояния в последовательность промежуточных состояний, изменяя значения переменных метода. Автомат завершает свою работу, переходя в некоторое конечное состояние. Таким образом, здесь идет речь о достаточно прямой абстракции возможного использования языка представления методов. <i>операционная семантика языка</i> описывает смысл метода путем выполнения его операторов на простой машине-автомате. Изменения, происходящие в состоянии машины при выполнении данного оператора, определяют смысл этого оператора.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_5211
		=> nrel_note: [<p><i>Операционная семантика</i> конкретного <i>метода</i> сводится к описанию <i>метаметода</i>, который его интерпретирует, верифицирует и так далее.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6322
		<= nrel_inclusion: .system_element_465;
		=> nrel_idtf: [<p>метод, значениями параметров которого являются другие методы</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_5211
		-> .system_element_6323;
		-> .system_element_6324;;

		.system_element_6323
		=> .system_element_1120: [<p>Отношение <i>метаметод интерпретации*</i> представляет собой <i>класс sc-связок</i> между <i>sc-связкой</i>, обозначающей множество <i>методов</i>, и sc-узлом, обозначающим <i>метод</i>, который способен произвести интерпретацию заданного множества <i>методов</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6324
		=> .system_element_1120: [<p>Отношение <i>метаметод верификации и оценки качества*</i> представляет собой класс sc-связок между <i>sc-связкой</i>, обозначающей множество <i>методов</i>, и sc-узлом, обозначающим метод, который способен произвести верификацию и оценку качества заданного множества <i>методов</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6325
		=> .system_element_6326: 
			.system_element_6327;
			.system_element_6328;
			.system_element_6329;
			.system_element_6330;
			.system_element_6331;
			.system_element_6332
		;
		=> nrel_note: [<p>В рамках <i>Технологии OSTIS</i> таких метаметодов может быть большое разнообразие. Каждый из них может состоять из множества атомарных и неатомарных подметодов. Это могут быть как метаметоды, интерпретирующие методы определенных <i>языков представления методов</i>, так и метаметоды, верифицирующие и анализирующие качество этих методов. В том числе метаметоды могут производить операции над другими метаметодами.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6333
		=> .system_element_6326: 
			.system_element_6334;
			.system_element_6335;
			.system_element_6336;
			.system_element_6337;
			.system_element_6338;
			.system_element_6339
		;
		=> nrel_note: [<p>Так, например, при реализации методов в оstis-системах метаметодами будут являться <i>интепретатор Языка SCP</i>, а также интепретаторы, реализованные непосредственно на <i>Языке SCP</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		=> nrel_note: [<p>Понятие <i>синтакиса</i>, <i>денотационной</i> и операционной <i>семантики языков представления методов</i> сводятся к понятию синтаксиса, денотационной и операционной семантики вообще любого языка.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*];;

	.system_element_6316
	=> nrel_inclusion: [*

		.system_element_5250
		=> nrel_note: [<p>Для использования <i>языка представления методов</i> следует описать каждую конструкцию языка в отдельности, а также ее применение в совокупности с другими конструкциями. В языке существует множество различных конструкций, точное определение которых необходимо как программисту, применяющему язык, так и разработчику компилятора для этого языка. Программисту эти знания позволяют прогнозировать вычисления, производимые операторами метода. Разработчику описания конструкций необходимы для создания правильной реализации компилятора.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		=> nrel_note: [<p>Описание формальной модели <i>языка представления методов</i> можно задать его <i>спецификацией</i>. <i>спецификация языка представления методов*</i> содержит описание <i>синтаксиса</i>, <i>денотационной</i>, <i>операционной</i> <i>семантики языка представления методов</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6245
		=> nrel_inclusion: .system_element_6340;
		=> nrel_subdividing: {
			.system_element_6246
			(*
				<= nrel_inclusion: .system_element_4607;;
				=> nrel_idtf: [<p>теория правильно построенных информационных конструкций, принадлежащих заданному языку представления методов</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
			*);
			.system_element_6247
			(*
				<= nrel_inclusion: .system_element_4613;;
				=> nrel_idtf: [<p>обобщенная формулировка классов задач, решаемых с помощью данного языка представления методов*</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
			*);
			.system_element_6248
			(*
				<= nrel_inclusion: .system_element_4622;;
				=> nrel_idtf: [<p>перечень обобщенных агентов, обеспечивающих интерпретацию методов заданного языка представления методов*</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
				=> nrel_idtf: [<p>семейство методов интерпретации текстов данного языка представления методов*</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
				=> nrel_idtf: [<p>формальное описание интерпретатора заданного языка представления методов*</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);;
			*)
		};;
	*];;

	.system_element_6239
	=> nrel_inclusion: [*
		=> nrel_note: [<p>Текущее состояние в области проектирования и разработки программного обеспечения говорит о том, что разработчики больше стремятся автоматизировать разработку методов на конкретных языках представления методов, чем обеспечить себя инструментальными обучающими средствами их проектирования, в том числе проектирования новых <i>языков представления методов</i>. Это приводит к проблемам.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_1814: {
				[<p>В то время, как количество разработчиков, понимающих код какой-то сложной программной системы, уменьшается, требования к этой системе растут все быстрее и быстрее. Зачастую, разработчики сложных программных систем сами не в состоянии объяснить логику работы этих систем. По этой причине необходимо создавать инструментальные средства, которые будут позволять автоматизировать документирование программных систем.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Для обучения новых разработчиков навыкам работы с программными системы и их разработки необходимо привлекать ресурсы экспертов, понимающих принципы работы этих программных систем. Проблема решается разработкой справочной системы, которая будет позволять не только обучать пользователя тому, как проектировать методы решения задачи и программные системы на основе этих методов, но и указывать на пробелы в смежных дисциплинах, необходимых для достижения качественных результатов всей своей деятельности.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>В инженерии часто разработчики проектируют и разрабатывают решения, которые уже когда-то были созданы другими специалистами. Таким образом, получаются функционально эквивалентные методы решения задач, а то, и вовсе, программные системы, решающие схожие проблемы. Ключом к решению данной проблемы является проектирование семантически мощной <i>библиотеки многократно используемых методов решения различных задач</i>.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			};;
			=> .system_element_180: {
				.system_element_6269
			};;
		*);;

		.system_element_6341
		=> nrel_note: [<p>Одной <i>Cемантической теории программ</i> недостаточно. Кроме нее, для перманетного и беспрепятственного проектирования и разработки <i>методов</i> различного класса необходимо разрабатывать: интеллектуальную систему поддержки проектирования и разработки методов, которая будет не только помогать разработчику верифицировать разрабатываемый метод, но и подсказывать способы его разработки;

		<li> семантически мощную библиотеку многократно используемых компонентов для быстрого поиска существующих методов решения задач и их применения для решения других более комплексных задач.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_180: {
				.system_element_6270;
				.system_element_6271;
				.system_element_2809
			};;
		*);;

		.system_element_6342
		=> nrel_note: [<p>Потенциальная система должна быть частью общего инструментального средства разработки интеллектуальны компьютерных систем нового поколения --- <i>Метасистемы OSTIS</i> --- и может состоять из следующих компонентов: интеллектуальной help-системы по семантической теории программ;

		<li> интеллектуальной help-системы по библиотеке многократно используемых методов решения задач,

		<li> интеллектуальной help-системы по комплексу инструментальных средств проектирования  методов решения задач,

		<li> интеллектуальной help-системы по методике обучения проектированию различных методов решения задач.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_180: {
				IMS
			};;
		*);
		=> nrel_note: [<p>Каждый компонент должен содержать: справочную подсистему,
		<li> подсистему мониторинга и анализа деятельности разработчика методов решения задач,
		<li> подсистему управления обучением.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		=> nrel_note: [<p>Каждая из подсистем взаимодействует с другими подсистемами, а также может функционировать автономно.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		=> nrel_note: [<p>Справочная подсистема является консультантом-экспертом в области <i>Семантической теории программ</i>, который может ответить на любой вопрос новичка или опытного пользователя. Каждая из таких систем может становиться индивидуальным помощников в обучении новых специалистов --- персональным ostis-ассистентом.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*];;

	.system_element_6240
	=> nrel_inclusion: [*

		.system_element_5250
		=> nrel_note: [<p><i>язык представления методов</i> можно определить множеством показателей, характеризующих отдельные его свойства. Возникает задача введения меры для оценки степени приспособленности языка представления методов к выполнению возложенных на него функций --- <i>критериев эффективности</i>. Критерии эффективности методов приводятся на основе частных показателей эффективности этих методов (показателей качества). Способ связи между частными показателями определяет вид критерия эффективности.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_180: {
				.system_element_6268
			};;
		*);;

		.system_element_6243
		=> .system_element_1164: 
			.system_element_6343;
			.system_element_6344;
			.system_element_6345;
			.system_element_6346;
			.system_element_6347;
			.system_element_6348
		;;

		.system_element_6349
		=> nrel_note: [<p><b><i>легкость чтения метода</i></b> должна способствовать легкому выделению основных понятий каждой части метода без обращения к его спецификации.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6343
		=> .system_element_1164: 
			.system_element_6350;
			.system_element_6351;
			.system_element_6352
		;;

		.system_element_5250
		=> nrel_note: [<p><i>язык представления методов</i> должен предоставить <i>простой</i> набор <i>информационных конструкций</i>, которые могут быть использованы в качестве базисных элементов при создании методов.Сильное воздействие на простоту оказывает <i>синтаксис языка</i>: он должен прозрачно отражать семантику конструкций, исключать двусмысленность и неоднозначность толкования.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6351
		=> nrel_note: [<p><b><i>ортогональность информационных конструкций языка представления методов</i></b> означает, что любые возможные комбинации различных <i>информационных конструкций</i> будут осмысленными, без неожиданного поведения, возникающего в результате взаимодействия конструкций или контекста использования.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6353
		=> nrel_note: [<p>Порядок передач управления между операторами метода, то есть <i>поток управления</i>, должен быть удобен для чтения и понимания человеком.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6354
		=> nrel_note: [<p><b><i>легкость создания метода</i></b> отражает удобство языка для представления этого метода в конкретной предметной области.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6344
		=> .system_element_1164: 
			.system_element_6350;
			.system_element_6355;
			.system_element_6351;
			.system_element_6356;
			.system_element_6357
		;;

		.system_element_6358
		=> nrel_note: [<p><i>синтаксис метода</i> должен способствовать легкому и прозрачному отображению в нем алгоритмических структур предметной области. <i>синтаксис языка представления методов</i> должен быть не только <i>простым</i>, но и <i>естественным</i>, и поддерживать <i>ортогональность</i> информационных конструкций языка.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6344
		=> nrel_note: [<p><b><i>легкость представления нового метода</i></b> обеспечивается <i>полной и точной, согласованной и целостной спецификацией</i> соответствующего языка. То есть необходимо достаточное количество <i>информационных конструкций</i> в этом языке для того чтобы представить конкретный <i>метод</i>. При этом <i>спецификация языка</i> должна быть согласованной и целостной чтобы представлять на ней непротиворечивые <i>методы</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6359
		=> .system_element_1164: 
			.system_element_6360;
			.system_element_6361;
			.system_element_6362;
			.system_element_6363;
			.system_element_6357
		;
		=> nrel_note: [<p>Все эти критерии можно применить и касательно самих <i>языков представления методов</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6360
		=> nrel_note: [<p><b><i>стоимость применения метода</i></b> во многом зависит от структуры <i>языка представления методов</i>. Язык, требующий многочисленных проверок синтаксических типов во время применения метода, будет препятствовать быстрой работе программы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6364
		=> nrel_note: [<p><b><i>размер стоимости интерпретации метода</i></b> зависит от возможностей используемого метаметода интерпретации. Чем совершеннее методы оптимизации, тем дороже стоит интерпретация.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6359
		=> nrel_note: [<p>Размер стоимости создания, тестирования и использования метода зависит от используемого метаметода верификации и оценки качества этого метода.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		=> nrel_note: [<p>Многочисленные исследования показывают, что значительную часть стоимости используемого метода составляет не стоимость его разработки, а <i>стоимость его сопровождения</i>. Связывая сопровождение методов с другими их характеристиками, следует выделить, прежде всего, зависимость от читабельности, поскольку сопровождение обычно происходит следующим поколением разработчиков.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_180: {
				.system_element_6255
			};;
		*);;

		.system_element_5250
		=> nrel_note: [<p><b><i>общий объем задач и многообразие видов задач, решаемых при помощи данного класса методов</i></b>, являются не менее важными характеристиками и показывают степень универсальности соответствующего языка представления методов. Чем больше задач можно решить на <i>я.п.м.</i>, тем он универсальнее.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;

		.system_element_6365
		=> nrel_note: [<p><b><i>надежность методов языка представления методов</i></b> должна обеспечиваться минимумом ошибок при работе конкретного метода.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*];;
*];;
