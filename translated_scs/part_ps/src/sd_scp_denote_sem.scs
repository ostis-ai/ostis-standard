.system_element_6489
=> nrel_inclusion: [*
	<- .system_element_3;
	-> rrel_key_sc_element: .system_element_6490;;

	.system_element_6490
	<- subject_domain;
	-> rrel_maximum_studied_object_class: new_scp_operator;
	-> .system_element_335: 
		rrel_scp_operand;
		rrel_scp_const;
		rrel_scp_var;
		rrel_fixed;
		rrel_assign;
		rrel_set;
		rrel_erase
	;;

	new_scp_operator
	<= nrel_inclusion: action_in_sc_memory;
	<= nrel_set_of_subsets: scp_operator_atomic_type;
	=> nrel_subdividing: {
		scp_operator_of_structure_generation
		(*
			=> nrel_subdividing: {
				.system_element_6491;
				.system_element_6492;
				.system_element_6493;
				.system_element_6494
			};;
		*);
		.system_element_6495
		(*
			=> nrel_subdividing: {
				.system_element_6496;
				.system_element_6497;
				.system_element_6498;
				.system_element_6499;
				.system_element_6500
			};;
		*);
		.system_element_6501
		(*
			=> nrel_subdividing: {
				.system_element_6502;
				.system_element_6503;
				.system_element_6504;
				.system_element_6505
			};;
		*);
		scp_operator_of_conditions_check
		(*
			=> nrel_subdividing: {
				ifGr;
				ifEq;
				ifCoin;
				ifFormCont;
				ifVarAssign;
				ifType
			};;
		*);
		scp_operator_of_scp_operand_value_control
		(*
			=> nrel_subdividing: {
				varErase;
				varAssign
			};;
		*);
		scp_operator_of_scp_process_control
		(*
			=> nrel_subdividing: {
				return;
				syncronize;
				waitReturnSet;
				waitReturn;
				call
			};;
		*);
		scp_operator_of_event_control
		(*
			<= nrel_subdividing: {
				sys_wait
			};;
		*);
		scp_operator_of_file_content_process
		(*
			=> nrel_subdividing: {
				contASin;
				contACos;
				contDiv;
				contMult;
				contSub;
				contAdd;
				contTg;
				contCos;
				contSin;
				contLn;
				contPow;
				contErase;
				contAssign;
				contDivRem;
				contDivInt;
				contATg;
				stringToLowerCase;
				stringToUpperCase;
				stringReplace;
				.system_element_6506;
				.system_element_6507;
				stringSlice;
				.system_element_6508;
				stringLen;
				stringSplit;
				stringIfGr;
				stringIfEq
			};;
		*);
		scp_operator_of_lock_management
		(*
			=> nrel_subdividing: {
				unlockProc;
				unlockEl;
				lockEl;
				lockElEdit;
				.system_element_6509;
				unlockElStr;
				lockElStr;
				lockElStrEdit;
				lockElStrRemove
			};;
		*)
	};
	=> nrel_note: [<p>Каждый <b><i>scp-оператор</i></b> представляет собой некоторое элементарное <i>действие в sc-памяти</i>. Аргументы <i>scp-оператора</i> будем называть операндами. Порядок операндов указывается при помощи соответствующих ролевых отношений (<i>1'</i>, <i>2'</i>, <i>3'</i> и так далее). Операнд, помеченный ролевым отношением <i>1'</i>, будем называть первым операндом, помеченный ролевым отношением <i>2'</i> --- вторым операндом, и т.д. Тип и смысл каждого операнда также уточняется при помощи различных подклассов отношения <i>scp-операнд'</i>. В общем случае операндом может быть любой <i>sc-элемент</i>, в том числе, знак какой-либо <i>scp-программы</i>, в том числе самой программы, содержащей данный оператор.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Каждый <b><i>scp-оператор</i></b> должен иметь один и более операнд, а также указание того <b><i>scp-оператора</i></b> (или нескольких), который должен быть выполнен следующим. Исключение их данного правила составляет <i>scp-оператор завершения выполнения программы</i>, который не содержит ни одного операнда и после выполнения которого никакие <i>scp-операторы</i> в рамках данной программы выполняться не могут.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_6510
	=> .system_element_264: [<p>Каждый <b><i>атомарный тип scp-оператора</i></b> представляет собой класс <i>scp-операторов</i>, который не разбивается на более частные, и, соответственно, интерпретируется реализацией <i>Aбстрактной scp-машины</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_init
	<= nrel_inclusion: rrel_1;
	=> nrel_note: [<p>Ролевое отношение <b><i>начальный оператор'</i></b> указывает в рамках декомпозиции соответствующего <i><b>scp-программе</b></i> <i>scp-процесса</i> те <i>scp-операторы</i>, которые должны быть выполнены в первую очередь, то есть те, с которых собственно начинается выполнение <i>scp-процесса</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_new_param
	<= nrel_inclusion: rrel_argument_of_action;
	=> nrel_subdividing: {
		rrel_in;
		rrel_out
	};
	=> nrel_note: [<p>Ролевое отношение <b><i>параметр scp-программы'</i></b> связывает знак соответствующего <i>scp-программе</i> <i><b>scp-процесса</b></i> с его аргументами.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_in
	=> .system_element_264: [<p>Параметры типа <b><i>in-параметр'</i></b> хоть и соответствуют <i>переменным scp-программы'</i>, не могут менять значение в процессе ее интерпретации. Фиксированное значение переменной устанавливается при создании уникальной копии <i>scp-программы</i> (<i>scp-процесса</i>) для ее интерпретации, и, таким образом, соответствующая <i>scp-переменная'</i> на момент начала ее интерпретации становится <i>scp-константой'</i> в рамках каждого <i>scp-оператора</i>, в котором встречалась данная <i>scp-переменная'</i>. Использование <i>in-параметров</i> можно рассматривать по аналогии с использованием варианта механизма передачи по значению в традиционных языках программирования, с тем условием, что значение локальной переменной в рамках дочерней программы не может быть изменено.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_out
	=> .system_element_264: [<p>Параметры типа <b><i>out-параметр'</i></b> соответствуют <i>переменным scp-программы'</i> и обладают всеми теми же соответствующими свойствами. Чаще всего предполагается, что значение данного параметра необходимо родительской <i>scp-программе</i>, содержащей оператор вызова текущей <i>scp-программы</i>. При этом на момент начала интерпретации в качестве параметра дочернему процессу передается непосредственно узел, обозначающий переменную (а точнее, ее уникальную копию в рамках процесса) родительского процесса. Указанная переменная может при необходимости иметь значение, либо не иметь. После завершения и во время интерпретации дочернего процесса родительский процесс по-прежнему может работать с переменной, переданной в качестве <i>out-параметра'</i>, при необходимости просматривая или изменяя ее значение. Использование out-параметра можно рассматривать по аналогии с использованием механизма передачи по ссылке в традиционных <i>языках программирования</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_837
	=> nrel_subdividing: .system_element_6511
	(*
		<=> .system_element_72: {
			non_standard_structure;
			standard_structure
		}
		(*
			=> nrel_subdividing: {
				sc_1_el_str;
				sc_3_el_str;
				sc_5_el_str
			};;
		*);;
	*);;

	non_standard_structure
	=> .system_element_264: [<p>Каждая <i>sc-конструкция нестандартного вида</i> состоит из произвольного количества <i>sc-элементов</i> произвольного типа.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_126: "file://images/sd_agents/pic_ps1.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример sc-конструкции нестандартного вида</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	standard_structure
	=> .system_element_264: [<p>Каждый элемент <i><b>sc-конструкции</b> стандартного вида</i> имеет свою условную строго фиксированную позицию в рамках этой <b>sc-конструкции</b> (первый элемент, второй элемент и так далее). В зависимости от указанной позиции вводятся дополнительные ограничения на тип соответствующего <i>sc-элемента</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	sc_1_el_str
	=> .system_element_264: [<p>Каждая <i>одноэлементная sc-конструкция</i> состоит из одного <i>sc-элемента</i> произвольного типа.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_264: [<p>Каждая <i>sc-конструкция нестандартного вида</i> состоит из произвольного количества <i>sc-элементов</i> произвольного типа.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_126: "file://images/sd_agents/pic_ps2.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример одноэлементных sc-конструкций в SCg-коде</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	sc_3_el_str
	=> .system_element_264: [<p>Каждая <i>трехэлементная sc-конструкция</i> состоит из трех <i>sc-элементов</i>. Второй элемент всегда является <i>sc-коннектором</i>, остальные элементы могут быть произвольного типа.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_126: "file://images/sd_agents/pic_ps3.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример трехэлементной sc-конструкции в SCg-коде</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	sc_5_el_str
	=> .system_element_264: [<p>Каждая <i>пятиэлементная sc-конструкция</i> состоит из пяти <i>sc-элементов</i>. Второй и четвертый элементы обязательно являются <i>sc-коннекторами</i>, остальные элементы могут быть произвольного типа.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_126: "file://images/sd_agents/pic_ps4.png"
	(*
		<- concept_file;;
		=> nrel_format: format_png;;
		=> nrel_idtf: [<p>SCg-текст. Пример пятиэлементной sc-конструкции в SCg-коде</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	rrel_scp_operand
	<= nrel_inclusion: rrel_argument_of_action;
	<- auxiliary_concept;
	<- role_relation;
	=> nrel_subdividing: {
		rrel_scp_const;
		rrel_scp_var
	};
	=> nrel_subdividing: {
		rrel_fixed;
		rrel_assign
	};
	=> nrel_subdividing: {
		.system_element_6512;
		.system_element_6513
	};
	=> nrel_inclusion: 
		rrel_set
		(*
			=> nrel_subdividing: {
				rrel_set_1;
				rrel_set_2;
				rrel_set_3;
				rrel_set_4;
				rrel_set_5
			};;
		*);
		rrel_erase;
		rrel_type_of_sc_element
		(*
			=> nrel_subdividing: {
				rrel_node
				(*
					=> nrel_subdividing: {
						rrel_struct;
						rrel_relation
						(*
							=> nrel_inclusion: .system_element_6514;;
						*);
						rrel_class
					};;
				*);
				rrel_arc
				(*
					=> nrel_subdividing: {
						rrel_common;
						rrel_access
						(*
							=> nrel_inclusion: .system_element_6515;;
							=> nrel_subdividing: {
								rrel_pos;
								rrel_neg;
								rrel_fuz
							};;
							=> nrel_subdividing: {
								rrel_temp;
								rrel_perm
							};;
						*)
					};;
				*);
				rrel_edge;
				rrel_file
			};;
		*)
	;
	=> nrel_explanation: [<p>Ролевое отношение <i>scp-операнд'</i> является неосновным понятием и указывает на принадлежность аргументов <i>scp-оператору</i>. Помимо указания какого-либо класса <i>scp-операндов'</i> порядок аргументов <i>scp-оператора</i> дополнительно уточняется <i>ролевыми отношениями 1'</i>, <i>2'</i> и т. д.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_scp_const
	=> nrel_explanation: [<p>В рамках <i>scp-программы</i> <i>scp-константы'</i> явно участвуют в <i><b>scp-операторах</b></i> в качестве элементов (в теоретико-множественном смысле) и напрямую обрабатываются при интерпретации <i>scp-программы</i>. Константами в рамках <i>scp-программы</i> могут быть <i>sc-элементы</i> любого типа, как <i><b>sc-константы</b></i>, так и <i><b>sc-переменные</b></i>. Константа в рамках <i>scp-программы</i> остается неизменной в течение всего срока интерпретации. Константа <i><b>scp-программы</b></i> может быть рассмотрена как переменная, значение которой совпадает с самой переменной в каждый момент времени и изменено быть не может. Таким образом, далее будем считать, что <i>scp-константа'</i> и ее значение это одно и то же. Каждый <i>in-параметр'</i> при интерпретации каждой конкретной копии <i>scp-программы</i> становится <i>scp-константой'</i> в рамках всех ее операторов, хотя в исходном теле данной программы в каждом из этих операторов он является <i>scp-переменной'</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_scp_var
	=> nrel_explanation: [<p>В рамках <i>scp-программы</i> <i>scp-переменные'</i> не обрабатываются явно при интерпретации, обрабатываются значения переменных. Каждая переменная <i>scp-программы</i> может иметь одно значение в каждый момент времени, т. е. представляет собой ситуативный <i>синглетон</i>, элементом которого является текущее значение <i>scp-переменной'</i>. Значение каждой <i>scp-переменной'</i> может меняться в ходе интерпретации <i>scp-программы</i>. При этом интерпретатор при обработке <i>scp-оператора</i> работает непосредственно со значениями <i><b>scp-переменных'</b></i>, а не самими <i>scp-переменными'</i> (которые также являются узлами той же семантической сети).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_fixed
	=> nrel_explanation: [<p>Значение операндов, помеченных ролевым отношением <i>scp-операнд с заданным значением'</i>, считается заданным в рамках текущего <i>scp-оператора</i>. Данное значение учитывается при выполнении <i>scp-оператора</i> и остается неизменным после окончания выполнения <i>scp-оператора</i>. Каждая <i>scp-константа'</i> по умолчанию рассматривается как <i>scp-операнд с заданным значением'</i>, в связи с чем явное использование данного ролевого отношения в таком случае является избыточным. В таком случае в качестве значения рассматривается непосредственно сам операнд. В случае, если отношением <i><b>scp-операнд</b> с заданным значением'</i> помечена <i>scp-переменная'</i>, то осуществляется попытка поиска значения для данной <i>scp-переменной'</i> (ее элемента). Если попытка оказалась безуспешной, то возникает ошибка времени выполнения, которая должна быть обработана соответствующим образом.Любой <i>scp-операнд с заданным значением'</i> независимо от конкретного типа <i>scp-оператора</i> может быть <i>scp-переменной'</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_assign
	=> nrel_explanation: [<p>Значение операндов, помеченных ролевым отношением <i>scp-операнд со свободным значением'</i>, считается свободным (не заданным заранее) в рамках текущего <i>scp-оператора</i>. В начале выполнения <i>scp-оператора</i> связь между <i>scp-переменной'</i>, помеченной данным ролевым отношением, и ее элементом (значением) всегда удаляется. В результате выполнения данного оператора может быть либо сгенерировано новое значение <i>scp-переменной'</i>, либо не сгенерировано, тогда <i>scp-переменная'</i> будет считаться не имеющей значения. Ни одна <i>scp-константа'</i> не может быть помечена как <i>scp-операнд со свободным значением'</i>, поскольку константа не может изменять свое значение в ходе интерпретации <i>scp-программы</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_type_of_sc_element
	=> .system_element_264: [<p>Ролевое отношение <i>тип <b>sc-элемента'</b></i> используется для уточнения типа <i>sc-элемента</i>, выступающего в роли значения некоторого операнда. <i>тип <b>sc-элемента'</b></i> имеет смысл указывать только для операндов, помеченных как <i>scp-операнд со свободным значением'</i>, тогда данное уточнение типа <i><b>sc-элемента</b></i> будет использовано для сужения области поиска либо уточнения параметров генерации каких-либо конструкций. Значением <i>scp-операндов с заданным значением'</i> является конкретный, известный на момент начала выполнения <i>scp-оператора sc-элемент</i> с конкретным типом, не зависящим от указания <i>типа sc-элемента'</i>, в связи с чем использование ролевого отношения <i>тип sc-элемента'</i> в данном случае является некорректным.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Допускается использование комбинаций семантически непротиворечащих друг другу подмножеств указанного отношения. Например, допускается комбинация <i>константный sc-элемент'</i> и <i>sc-дуга общего вида'</i>, но не допускается комбинация <i>sc-узел'</i> и <i>sc-дуга'</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_set
	=> .system_element_264: [<p>Ролевое отношение <b><i>формируемое множество'</i></b> используется для указания того факта, что в результате выполнения <i>scp-оператора</i> должно быть сформировано либо дополнено некоторое множество <i>sc-элементов</i>, являющееся значением одного из операндов данного <i>scp-оператора</i>. При этом если данный операнд помечен как <i>scp-операнд со свободным значением'</i>, то множество будет сформировано с нуля (сгенерирован новый <i>sc-элемент</i>, обозначающий данное множество), в противном случае уже существующее множество может быть дополнено. Использование данного ролевого отношения предполагает, что при его отсутствии множество бы не формировалось, а значением указанного операнда стал бы произвольный <i>sc-элемент</i> из данного множества.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Ролевое отношение <i>формируемое множество'</i> без уточнения порядкового номера используется только в <i>scp-операторах обработки произвольных конструкций</i>. Для явного указания номера операнда, которому соответствует <i>формируемое множество'</i>, используются подмножества данного ролевого отношения, аналогичные ролевым отношениям, задающим порядок элементов в кортеже (<i>1', 2', 3'</i> и так далее), например <i>формируемое множество 1'</i>, <i>формируемое множество 2'</i> и так далее. Указанные ролевые отношения используются только в <i>scp-операторах поиска конструкций с формированием множеств</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_erase
	=> .system_element_264: [<p>Ролевое отношение <b><i>удаляемый sc-элемент'</i></b> используется для указания тех операндов, значение которых должно быть удалено в процессе выполнения <i>scp-операторов удаления</i>. Данным ролевым отношением может быть помечен как <i>scp-операнд с заданным значением'</i>, так и <i>scp-операнд со свободным значением'</i>. При этом удаляемым <i>sc-элементом</i> может быть как <i>scp-константа'</i>, так и <i>scp-переменная'</i> (в случае <i>scp-переменной'</i> удаляется не только связка принадлежности между этой <i>scp-переменной'</i> и ее значением, но и непосредственно сам <i>sc-элемент</i>, являющийся значением).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_265
	-> {
		rrel_scp_var;
		sc_variable
	};
	-> {
		rrel_scp_const;
		sc_constant
	};;

	.system_element_6492
	=> nrel_note: [<p>На рисунках показан пример работы scp-оператора генерации пятиэлементной конструкции. В приведенном примере выполняется генерация пятиэлементной конструкции, которая имеет два scp-операнда с заданным значением. В примере предполагается, что рассматриваемые элементы (some_node1 и some_node2) изначально никак не связаны между собой.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_126: "file://images/sd_agents/genElStr5_fafaa.png"
		(*
			<- concept_file;;
			=> nrel_format: format_png;;
			=> nrel_idtf: [<p>SCg-текст. Пример выполнения scp-оператора генерации пятиэлементной конструкции (вызов scp-оператора)</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
		=> .system_element_126: "file://images/sd_agents/genElStr5_fafaa_2.png"
		(*
			<- concept_file;;
			=> nrel_format: format_png;;
			=> nrel_idtf: [<p>SCg-текст. Пример выполнения scp-оператора генерации пятиэлементной конструкции (результат выполнения scp-оператора)</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
	*);;

	.system_element_6500
	=> nrel_note: [<p>На рисунках приведен пример scp-оператора поиска трехэлементной конструкции, которая имеет два scp-операнда с заданным значением. В примере предполагается, что рассматриваемые элементы (some_node1 и some_node2) изначально связаны между собой константной постоянной sc-дугой.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_126: "file://images/sd_agents/searchElStr3_faf.png"
		(*
			<- concept_file;;
			=> nrel_format: format_png;;
			=> nrel_idtf: [<p>SCg-текст. Пример выполнения scp-оператора поиска трехэлементной конструкции (вызов scp-оператора)</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
		=> .system_element_126: "file://images/sd_agents/searchElStr3_faf_2.png"
		(*
			<- concept_file;;
			=> nrel_format: format_png;;
			=> nrel_idtf: [<p>SCg-текст. Пример выполнения scp-оператора поиска трехэлементной конструкции (результат выполнения scp-оператора)</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
	*);;

	.system_element_6503
	=> nrel_note: [<p>На рисунках приведен пример scp-оператора поиска трехэлементной конструкции, которая имеет два scp-операнда с заданным значением. В примере предполагается, что рассматриваемые элементы (some_node1 и some_node2) изначально связаны между собой константной постоянной sc-дугой.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_126: "file://images/sd_agents/searchElStr3_faf.png"
		(*
			<- concept_file;;
			=> nrel_format: format_png;;
			=> nrel_idtf: [<p>SCg-текст. Пример выполнения scp-оператора удаления одноэлементной конструкции (вызов scp-оператора)</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
		=> .system_element_126: "file://images/sd_agents/searchElStr3_faf_2.png"
		(*
			<- concept_file;;
			=> nrel_format: format_png;;
			=> nrel_idtf: [<p>SCg-текст. Пример выполнения scp-оператора удаления одноэлементной конструкции (результат выполнения scp-оператора)</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
	*);;
*];;
