.system_element_5536
=> nrel_inclusion: [*

	.system_element_5676
	<- subject_domain;
	-> .system_element_1835: new_scp_operator;
	-> .system_element_748: 
		rrel_scp_operand;
		rrel_scp_const;
		rrel_scp_var;
		rrel_fixed;
		rrel_assign;
		rrel_set;
		rrel_erase
	;;

	new_scp_operator
	<= nrel_inclusion: action_in_sc_memory;
	<= nrel_set_of_subsets: scp_operator_atomic_type;
	=> nrel_subdividing: {
		scp_operator_of_structure_generation
		(*
			=> nrel_subdividing: {
				.system_element_5677;
				.system_element_5678;
				.system_element_5679;
				.system_element_5680
			};;
		*);
		.system_element_5681
		(*
			=> nrel_subdividing: {
				.system_element_5682;
				.system_element_5683;
				.system_element_5684;
				.system_element_5685;
				.system_element_5686
			};;
		*);
		.system_element_5687
		(*
			=> nrel_subdividing: {
				.system_element_5688;
				.system_element_5689;
				.system_element_5690;
				.system_element_5691
			};;
		*);
		scp_operator_of_conditions_check
		(*
			=> nrel_subdividing: {
				ifGr;
				ifEq;
				ifCoin;
				ifFormCont;
				ifVarAssign;
				ifType
			};;
		*);
		scp_operator_of_scp_operand_value_control
		(*
			=> nrel_subdividing: {
				varErase;
				varAssign
			};;
		*);
		scp_operator_of_scp_process_control
		(*
			=> nrel_subdividing: {
				return;
				syncronize;
				waitReturnSet;
				waitReturn;
				call
			};;
		*);
		scp_operator_of_event_control
		(*
			<= nrel_subdividing: {
				sys_wait
			};;
		*);
		scp_operator_of_file_content_process
		(*
			=> nrel_subdividing: {
				contASin;
				contACos;
				contDiv;
				contMult;
				contSub;
				contAdd;
				contTg;
				contCos;
				contSin;
				contLn;
				contPow;
				contErase;
				contAssign;
				contDivRem;
				contDivInt;
				contATg;
				stringToLowerCase;
				stringToUpperCase;
				stringReplace;
				.system_element_5692;
				.system_element_5693;
				stringSlice;
				.system_element_5694;
				stringLen;
				stringSplit;
				stringIfGr;
				stringIfEq
			};;
		*);
		scp_operator_of_lock_management
		(*
			=> nrel_subdividing: {
				unlockProc;
				unlockEl;
				lockEl;
				lockElEdit;
				.system_element_5695;
				unlockElStr;
				lockElStr;
				lockElStrEdit;
				lockElStrRemove
			};;
		*)
	};;

	rrel_scp_operand
	<= nrel_inclusion: rrel_argument_of_action;
	<- auxiliary_concept;
	<- role_relation;
	=> nrel_subdividing: {
		rrel_scp_const;
		rrel_scp_var
	};
	=> nrel_subdividing: {
		rrel_fixed;
		rrel_assign
	};
	=> nrel_subdividing: {
		.system_element_5696;
		.system_element_5697
	};
	=> nrel_inclusion: 
		rrel_set
		(*
			=> nrel_subdividing: {
				rrel_set_1;
				rrel_set_2;
				rrel_set_3;
				rrel_set_4;
				rrel_set_5
			};;
		*);
		rrel_erase;
		rrel_type_of_sc_element
		(*
			=> nrel_subdividing: {
				rrel_node
				(*
					=> nrel_subdividing: {
						rrel_struct;
						rrel_relation
						(*
							=> nrel_inclusion: .system_element_5698;;
						*);
						rrel_class
					};;
				*);
				rrel_arc
				(*
					=> nrel_subdividing: {
						rrel_common;
						rrel_access
						(*
							=> nrel_inclusion: .system_element_5699;;
							=> nrel_subdividing: {
								rrel_pos;
								rrel_neg;
								rrel_fuz
							};;
							=> nrel_subdividing: {
								rrel_temp;
								rrel_perm
							};;
						*)
					};;
				*);
				rrel_edge;
				rrel_file
			};;
		*)
	;
	=> nrel_explanation: [<p>Ролевое отношение <i>scp-операнд'</i> является неосновным понятием и указывает на принадлежность аргументов <i>scp-оператору</i>. Помимо указания какого-либо класса <i>scp-операндов'</i> порядок аргументов <i>scp-оператора</i> дополнительно уточняется <i>ролевыми отношениями 1'</i>, <i>2'</i> и т. д.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_scp_const
	=> nrel_explanation: [<p>В рамках <i>scp-программы</i> <i>scp-константы'</i> явно участвуют в <i><b>scp-операторах</b></i> в качестве элементов (в теоретико-множественном смысле) и напрямую обрабатываются при интерпретации <i>scp-программы</i>. Константами в рамках <i>scp-программы</i> могут быть <i>sc-элементы</i> любого типа, как <i><b>sc-константы</b></i>, так и <i><b>sc-переменные</b></i>. Константа в рамках <i>scp-программы</i> остается неизменной в течение всего срока интерпретации. Константа <i><b>scp-программы</b></i> может быть рассмотрена как переменная, значение которой совпадает с самой переменной в каждый момент времени и изменено быть не может. Таким образом, далее будем считать, что <i>scp-константа'</i> и ее значение это одно и то же. Каждый <i>in-параметр'</i> при интерпретации каждой конкретной копии <i>scp-программы</i> становится <i>scp-константой'</i> в рамках всех ее операторов, хотя в исходном теле данной программы в каждом из этих операторов он является <i>scp-переменной'</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_scp_var
	=> nrel_explanation: [<p>В рамках <i>scp-программы</i> <i>scp-переменные'</i> не обрабатываются явно при интерпретации, обрабатываются значения переменных. Каждая переменная <i>scp-программы</i> может иметь одно значение в каждый момент времени, т. е. представляет собой ситуативный <i>синглетон</i>, элементом которого является текущее значение <i>scp-переменной'</i>. Значение каждой <i>scp-переменной'</i> может меняться в ходе интерпретации <i>scp-программы</i>. При этом интерпретатор при обработке <i>scp-оператора</i> работает непосредственно со значениями <i><b>scp-переменных'</b></i>, а не самими <i>scp-переменными'</i> (которые также являются узлами той же семантической сети).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_fixed
	=> nrel_explanation: [<p>Значение операндов, помеченных ролевым отношением <i>scp-операнд с заданным значением'</i>, считается заданным в рамках текущего <i>scp-оператора</i>. Данное значение учитывается при выполнении <i>scp-оператора</i> и остается неизменным после окончания выполнения <i>scp-оператора</i>. Каждая <i>scp-константа'</i> по умолчанию рассматривается как <i>scp-операнд с заданным значением'</i>, в связи с чем явное использование данного ролевого отношения в таком случае является избыточным. В таком случае в качестве значения рассматривается непосредственно сам операнд. В случае, если отношением <i><b>scp-операнд</b> с заданным значением'</i> помечена <i>scp-переменная'</i>, то осуществляется попытка поиска значения для данной <i>scp-переменной'</i> (ее элемента). Если попытка оказалась безуспешной, то возникает ошибка времени выполнения, которая должна быть обработана соответствующим образом.Любой <i>scp-операнд с заданным значением'</i> независимо от конкретного типа <i>scp-оператора</i> может быть <i>scp-переменной'</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	rrel_assign
	=> nrel_explanation: [<p>Значение операндов, помеченных ролевым отношением <i>scp-операнд со свободным значением'</i>, считается свободным (не заданным заранее) в рамках текущего <i>scp-оператора</i>. В начале выполнения <i>scp-оператора</i> связь между <i>scp-переменной'</i>, помеченной данным ролевым отношением, и ее элементом (значением) всегда удаляется. В результате выполнения данного оператора может быть либо сгенерировано новое значение <i>scp-переменной'</i>, либо не сгенерировано, тогда <i>scp-переменная'</i> будет считаться не имеющей значения. Ни одна <i>scp-константа'</i> не может быть помечена как <i>scp-операнд со свободным значением'</i>, поскольку константа не может изменять свое значение в ходе интерпретации <i>scp-программы</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;
*];;
