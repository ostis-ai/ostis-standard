.segment_4 = [*
.system_element_3755
=> nrel_inclusion: [*

	.system_element_357
	=> nrel_note: [<p>В предыдущем сегменте "<b>SC-код как синтаксическое расширение Ядра SC-кода</b>" рассмотрен <b>Синтаксис SC-кода</b> путём:

	<ul>

		<li> введения <i>синтаксически выделяемых классов sc-элементов</i> в рамках <i>SC-кода</i>;

		<li> описания <i>теоретико-множественных связей</i> между указанными классами <i>sc-элементов</i> (к такому описанию, в частности, относится <i>Синтаксическая классификация sc-элементов в рамках SC-кода</i>);

		<li> введения двух отношений инцидентности <i>sc-элементов</i> --- <i>Отношения инцидентности sc-коннекторов*</i> и <i>Отношения инцидентности входящих sc-дуг*</i>;

		<li> описания <i>Синтаксических правил SC-кода</i>, которые, прежде всего, описывают формальные свойства указанных выше отношений инцидентности <i>sc-элементов</i>.</li>

	<ul>Однако для того, чтобы получить возможность <u>все</u> (!) <i>Синтаксические правила SC-кода</i> записать средствами самого <i>SC-кода</i>, необходимо иметь <u>явное</u> представление <i>пар</i> отношений инцидентности <i>sc-элементов</i> в виде <i>sc-дуг</i>, принадлежащим этим отношениям. В случае, если указанные <i>sc-дуги</i> инцидентности являются <i>sc-переменными</i>, логико-семантических проблем не возникнет. И этого, кстати, вполне достаточно, чтобы <i>Синтаксические правила SC-кода</i>, сформулированные в виде <i>логических высказываний</i>, записать средствами <i>SC-кода</i>. Но, если разрешить <i>sc-дугам</i> инцидентности быть <i>sc-константами</i>, то, во-первых, в <i>Синтаксические правила SC-кода</i> необходимо добавить Правило удаления <i>константной sc-дуги инцидентности</i>, если эта инцидентность представлена неявно, а, во-вторых, в <i>Правила синтаксической трансформации sc-элементов</i> необходимо добавить Правило трансформации (замены) <i>константной sc-дуги инцидентности</i> на неявное представление этой инцидентности.В теоретическом и, возможно, даже в практическом плане может быть интересна такая синтаксическая модификация (синтаксическое расширение) <i>SC-кода</i>, в котором: 

	<ul>

		<li> <u>все</u> неявно представленные <i>пары инцидентности sc-элементов</i> заменяются на <i>константные sc-дуги инцидентности</i> --- неявно представленными <i>парами инцидентности</i> остаются <u>только</u> <i>пары инцидентности</i> константных <i>sc-дуг</i> инцидентности с компонентами этих <i>sc-дуг</i>;

		<li> В <b>Алфавит SC-кода</b> вводятся два новых <i>синтаксически выделяемых класса sc-элементов</i> --- <i>класс sc-дуг инцидентности sc-коннекторов</i>, а также <i>класс sc-дуг инцидентности входящих sc-дуг</i>.</li>

	<ul>В результате такого преобразования конструкций <i>SC-кода</i> конструкции <i>SC-кода</i> перестают быть графовыми конструкциями нетрадиционного вида, в которых рёбра, гиперрёбра, дуги могут быть инцидентны другим рёбрам, гиперребрам и дугам, а становятся классическими графами с двумя типами дуг (с <i>sc-дугами инцидентности sc-коннекторов</i> и с <i>sc-дугами инцидентности входящих sc-дуг</i>) и с пятью типами вершин (с вершинами, представляющими <i>sc-узлы общего вида</i>, с вершинами, представляющими <i>sc-узлы</i>, являющиеся знаками <i>внутренних файлов ostis-системы</i>, с вершинами, представляющими <i>sc-рёбра общего вида</i>, с вершинами, представляющими <i>sc-дуги общего вида</i>, с вершинами, представляющими <i>базовые sc-дуги</i>).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Рассмотренное преобразование конструкций <i>SC-кода</i> в теории графов называется поздразделением или подразбиением графа.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_180: .system_element_3756;;
	*);;
*];;

*];;