.system_element_4930
=> nrel_inclusion: [*
	=> .system_element_9: 
		.system_element_4931;
		ostis_system;
		.system_element_299;
		sc_memory;
		sc_model_of_knowledge_base;
		.system_element_4932;
		.system_element_4933;
		.system_element_4934;
		.system_element_281
	;
	=> nrel_introduction: [<p>Рассмотрим предлагаемый подход к организации реализации <i>ostis-систем</i>. Одним из ключевых принципов <i>Технологии OSTIS</i> является обеспечение платформенной независимости <i>ostis-систем</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_4935
	=> nrel_inclusion: .system_element_4928;
	=> nrel_explanation: [<p>Строгое разделение логико-семантической модели кибернетической системы (sc-модели кибернетической системы) и платформы интерпретации sc-моделей кибернетических систем (ostis-платформы).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_138: {
		[<p>Перенос <i>ostis-системы</i> с одной платформы на другую (например более новую и эффективную или ориентированную на определенный класс устройств) выполняется с минимальными накладными расходами (в идеальном случае --- вообще сводится просто к загрузке sc-модели кибернетической системы на платформу).</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Компоненты <i>ostis-систем</i> становятся универсальными, то есть могут использоваться в любых ostis-системах, где их использование является целесообразным.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Развитие платформы и развитие sc-моделей систем может осуществляться параллельно и независимо друг от друга, в общем случае отдельными независимыми коллективами разработчиков по своим собственным правилам и методикам.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};;

	.system_element_4936
	=> nrel_idtf: [<p>формальная модель (формальное описание) функционирования кибернетической системы, состоящая из (1) формальной модели информации, хранимой в памяти кибернетической системы и (2) формальной модели коллектива агентов, осуществляющих обработку указанной информации.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_inclusion: .system_element_4931
	(*
		=> nrel_idtf: [<p>логико-семантическая модель кибернетической системы, представленная в SC-коде</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_idtf: [<p>логико-семантическая модель ostis-системы, которая, в частности, может быть функционально эквивалентной моделью какой-либо кибернетической системы, не являющейся ostis-системой</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;

	.system_element_1181
	=> nrel_inclusion: computer_system
	(*
		=> nrel_idtf: [<p>искусственная кибернетическая система</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_inclusion: ostis_system
		(*
			=> nrel_idtf: [<p>компьютерная система, построенная по Технологии OSTIS на основе интерпретации спроектированной логико-семантической sc-модели этой системы</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
	*);;

	ostis_system
	<= nrel_inclusion: subject;
	=> .system_element_189: {
		.system_element_4931;
		.system_element_299
	};
	=> nrel_note: [<p>При условии строгого разделения <i>sc-модели кибернетической системы</i> и <i>ostis-платформы</i>, а также обеспечении универсальности <i>ostis-платформы</i>, то есть возможности интерпретировать <u>любую</u> <i>sc-модель кибернетической системы</i> на любом варианте <i>ostis-платформы</i>, этап <u>реализации</u> <i>ostis-системы</i> фактически сводится к загрузке <i>sc-модели кибернетической системы</i> на выбранный вариант <i>ostis-платформы</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_4931
	=> .system_element_189: {
		sc_memory;
		sc_model_of_knowledge_base;
		.system_element_4932;
		.system_element_4933
	}
	(*
		=> nrel_note: [<p>Явное выделение <i>sc-модели базы знаний</i>, <i>sc-модели решателя задач</i> и <i>sc-модели интерфейса кибернетической системы</i> в рамках <i>sc-модели кибернетической системы</i> является в известной мере условным, поскольку для обеспечения платформенной независимости <i>sc-модели кибернетической системы</i> и <i>решатель задач</i>, и <i>интерфейс системы</i> описываются средствами <i>SC-кода</i> и, таким образом, тоже являются частью <i>базы знаний</i>. Такое явное выделение указанных компонентов обусловлено удобством проектирования и сопровождения системы.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> .system_element_59: [<p>Ни на одном из этапов решения любой <i>информационной задачи</i> в данной системе не должны учитываться особенности той платформы, на которой в дальнейшем будет интерпретироваться указанная <i>sc-модель</i>. Аналогично ключевым требованием к <i>ostis-платформе</i> является обеспечение интерфейса доступа (поиска и преобразования) к хранимой в <i>sc-памяти</i> информации некоторым универсальным способом, не зависящим от особенностей реализации конкретной платформы. Таким образом, важнейшей задачей для обеспечения платформенной независимости <i>ostis-систем</i> является четкая спецификация требований, предъявляемых к каждой реализации <i>ostis-платформы</i>, то есть <u>стандартизация</u> <i>ostis-платформ</i>. Важно отметить, что такая стандартизация не должна зависеть от того, в каком виде реализуется <i>ostis-платформа</i>, и, соответственно, подходить и для аппаратного варианта реализации.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	sc_memory
	=> nrel_idtf: [<p>абстрактная sc-память</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>sc-хранилище</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>семантическая память, хранящая конструкции SC-кода</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>хранилище конструкций SC-кода</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p><b><i>sc-память</i></b> представляет собой с одной стороны общую среду для хранения <i>базы знаний</i>, а с другой стороны --- среду для взаимодействия <i>sc-агентов</i>. При этом каждый <i>sc-агент</i> опирается при работе на некоторые известные ему <i>sc-элементы</i>, хранящиеся в <i>sc-памяти</i> (<i>ключевые sc-элементы</i> данного <i>sc-агента</i>).</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_178: .system_element_4937
	(*
		<=> .system_element_72: {
			[<p>Хранение конструкций <i>SC-кода</i>.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Хранение внешних по отношению к <i>SC-коду</i> информационных конструкций (файлов). В общем случае хранение файлов может быть реализовано отличным от хранения <i>sc-конструкций</i> образом.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Доступ (чтение, создание, удаление) к конструкциям <i>SC-кода</i>, реализуемый через соответствующий программный или аппаратный интерфейс. Такой интерфейс по сути представляет собой язык микропрограммирования, позволяющий реализовывать на его основе более сложные процедуры обработки хранимых конструкций, в том числе --- операторы <i>Языка SCP</i>, набор которых по сути определяет перечень команд такого языка микропрограммирования. Сама <i>sc-память</i> в этом плане является пассивной и просто выполняет команды, инициируемые извне какими-либо субъектами.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*)
		};;
		=> nrel_note: [<p>Отметим, что разделение функции хранения и доступа является достаточно условным, поскольку реализовать функцию хранения конструкций без возможности доступа к ним хотя бы на самом низком уровне представляется нецелесообразным, ведь пользоваться таким хранилищем будет невозможно.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_note: [<p>Термины <i>sc-память</i> и <i>абстрактная sc-память</i> являются синонимами в том смысле, что говоря об <i>sc-памяти</i> мы подразумеваем некоторую абстракцию, для которой не уточняется ее максимальный объем (максимальное количество <i>sc-элементов</i>, которые могут одновременно храниться в такой памяти), конкретный способ хранения <i>sc-элементов</i>, средства обеспечения надежности хранения и так далее. Все указанные особенности уточняются на уровне <i>реализации sc-памяти</i> в аппаратном варианте или варианте программной модели на базе какой-либо другой архитектуры.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_299
	=> nrel_note: [<p>Важно отметить, что универсальность конкретного варианта реализации <i>ostis-платформы</i> очевидно ограничивается физической (аппаратной) частью этой реализации. Например, если аппаратная часть выбранного варианта платформы представляет собой обычный персональный компьютер, то без добавления дополнительных аппаратных компонентов система не сможет решать задачи, связанные с физическим перемещением себя и других объектов в пространстве, даже если программная часть системы способна выполнить необходимые расчеты. Говоря другими словами, любая <i>ostis-платформа</i> всегда будет ограничена в решении <i>поведенческих задач</i> каких-либо классов, какими бы мощными физическими ресурсами она не обладала. Таким образом, корректнее говорить об <u>универсальности <i>ostis-платформы</i> в контексте решения <i>информационных задач</i></u>, то есть возможности интерпретировать любые <i>sc-модели кибернетических систем</i> независимо от того, какого рода <i>информационные задачи</i> решают эти системы.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_4934
	=> nrel_idtf: [<p>абстрактная sc-машина</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<- .system_element_4823;
	=> .system_element_774: 
		.system_element_4938
		(*
			=> .system_element_1: .system_element_4939;;
		*);
		.system_element_4940
		(*
			=> .system_element_1: 
				.system_element_4820;
				.system_element_4821
			;;
		*)
	;
	=> nrel_idtf: [<p>обобщение всевозможных реализаций ostis-платформ, для которого задаются общие функциональные требования</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>обобщенная модель, описывающая функционирование любой ostis-платформы независимо от способа ее реализации</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>обобщенная модель, определяющая общие закономерности любой ostis-платформы независимо от способа ее реализации</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_idtf: [<p>обобщенный информационный образ ostis-платформы</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	<= .system_element_4703: .system_element_299;
	=> .system_element_189: {
		sc_memory
		(*
			<= .system_element_4703: .system_element_4319;;
		*);
		.system_element_4941
		(*
			<= nrel_inclusion: abstract_sc_agent;;
		*)
	};
	=> nrel_inclusion: .system_element_281
	(*
		<= .system_element_4703: .system_element_4908;;
		=> nrel_idtf: [<p>sc-машина, обеспечивающая интерпретацию базового языка программирования ostis-систем</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_idtf: [<p>обобщенная модель интерпретатора базового языка программирования ostis-систем</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_idtf: [<p>обобщенная модель, определяющая общие принципы интерпретации базового языка программирования ostis-систем</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_idtf: [<p>обобщенная модель операционной семантики базового языка программирования ostis-систем</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_note: [<p>Потенциально можно говорить о нескольких возможных функционально эквивалентных вариантах <i>scp-машины</i>, которые будут соответствовать разным вариантам базового языка программирования. В рамках текущей версии <i>Технологии OSTIS</i> фиксируется как денотационная семантика <i>Языка SCP</i>, так и его операционная семантика, реализуемая в виде <i>Абстрактной scp-машины</i>. Более подробно об этом говорится в <i>Предметной области и онтологии Базового языка программирования ostis-систем</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> .system_element_35: .system_element_4707;;
	*);;

	.system_element_4935
	=> nrel_note: [<p>Важно подчеркнуть, что несмотря на преимущества платформенно-независимой реализации <i>ostis-систем</i> иногда оказывается целесообразным реализовывать некоторые компоненты <i>ostis-систем</i> (например, конкретные <i>sc-агенты</i> или компоненты пользовательского интерфейса) на уровне <i>ostis-платформы</i>. В случае подобной реализации программ <i>sc-агентов</i> можно провести аналогию с реализацией каких-либо подпрограмм на уровне языков микропрограммирования для современных компьютеров. Чаще всего целесообразность такого решения обусловлена повышением производительности таких компонентов и системы в целом, поскольку реализация компонента с учетом особенностей платформы в общем случае является более производительной. В то же время заметим, что последнее утверждение не всегда верно, поскольку при реализации компонента на уровне логико-семантической модели могут быть реализованы, например, модели параллельной обработки информации, не всегда легко и понятно реализуемые на уровне платформы.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> nrel_note: [<p>Таким образом, при проектировании каждой конкретной <i>ostis-системы</i> разработчику необходимо принимать решение о реализации тех или иных компонентов на платформенно-независимом уровне или уровне платформы. При этом очевидно, что с точки зрения развития технологии и накопления проектного опыта более приоритетной является реализация компонентов <i>ostis-систем</i> на платформенно-независимом уровне.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> nrel_note: [<p>Исходя из сказанного, можно предположить существование <i>ostis-систем</i>, в которых все <i>sc-агенты</i> реализованы на уровне платформы, которая в таком случае по сути "заточена" под конкретную <i>ostis-систему</i> и может рассматриваться как аналог специализированного компьютера, ориентированного на решение задач только определенного ограниченного класса. Назовем такой вариант реализации <i>ostis-систем</i> <i>минимальной конфигурацией ostis-системы</i>.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);;
*];;
