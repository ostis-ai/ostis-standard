.segment_platfrom_independent = [*
.system_element_4919
=> nrel_inclusion: [*

	.system_element_3292
	=> .system_element_101: .system_element_4920
	(*
		<=> .system_element_72: {
			[<p>Этап проектирования, то есть построения формальной модели системы, достаточной для понимания принципов ее устройства и выполнения последующего этапа ее реализации.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Этап реализации, то есть непосредственно воплощения разработанной модели с использованием конкретных средств (инструментов, материалов, комплектующих и так далее). В случае компьютерных систем выполнение данного этапа обычно предполагает выбор конкретных языков программирования, библиотек, сторонних средств, таких как с.у.б.д. и различные сервисы, а также собственно программирование и отладку системы с использованием выбранных средств.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*)
		};;
		=> nrel_note: [<p>Для каждого из указанных этапов могут существовать свои методики, а также средства автоматизации соответствующих процессов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
		=> .system_element_266: [<p>Если этап проектирования компьютерной системы как правило требует участия высококвалифицированных специалистов и экспертов в предметных областях, в которых осуществляется автоматизация, то этап реализации, с одной стороны, как правило является более простым (при условии качественного выполнения этапа проектирования), а с другой стороны требует значительных ресурсов.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_2924: [<p>Одной из причин этого является необходимость работы компьютерной системы на различных платформах (устройствах), каждое из которых в общем случае может иметь свои особенности и ограничения, которые необходимо учитывать на этапе реализации. Решением данной проблемы является обеспечение платформенной независимости (или кроссплатформенности) разрабатываемых компьютерных систем.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);;
	*);;

	.system_element_4921
	=> nrel_note: [<p>Сама по себе идея обеспечения платформенной независимости давно и широко используется в современных компьютерных системах.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_inclusion: .system_element_4922
	(*
		=> nrel_explanation: [<p>Проблема обеспечения возможности работы программной системы в разных операционных системах.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_inclusion: .system_element_4923
	(*
		=> nrel_explanation: [<p>Проблема обеспечения совместимости операционной системы с различными аппаратными архитектурами. Для решения этой проблемы могут существовать разные сборки ядра операционной системы для разных аппаратных архитектур, как это делается для операционных систем семейства Linux. При этом следует отметить, что речь в подавляющем большинстве случаев идет не о принципиально разных архитектурах, а о вариантах реализации базовой архитектуры фон Неймана.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);;
	*);
	=> nrel_note: [<p>В случае, когда разрабатываемая компьютерная система проектируется на более низком уровне, чем операционная система как таковая (например, при программировании контроллеров управления различными устройствами), проблема обеспечения платформенной независимости значительно усугубляется и чаще всего может быть решена только для набора аппаратных средств определенного класса, для которого стандартизируется интерфейс доступа, то есть, по сути, набор низкоуровневых команд обработки информации.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_4922
	=> nrel_note: [<p>Большее внимание при проектировании современных компьютерных систем на данный момент уделяется платформенной независимости на уровне операционных систем.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> .system_element_4924: 
		[<p>Использование кроссплатформенных языков программирования, которые, в свою очередь, можно разделить на "полностью" интерпретируемые языки (Python, JavaScript и языки на его основе, PHP и другие) и языки, использующие компиляцию в сохраняющий независимость от платформы низкоуровневый байт-код, с его возможной последующей компиляцией в машинный код непосредственно в процессе исполнения (Just-in-time компиляция или JIT-компиляция). К языкам второго класса относятся, например, Java и C Sharp. Реализация такого подхода требует установки на целевой компьютер с операционной системой интерпретатора соответствующего языка программирования или байт-кода.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_4925: 
				[<p>В среднем производительность интерпретируемых программ ниже, чем компилируемых. Одним из подходов к решению данной проблемы и является JIT-компиляция.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Строго говоря, кроссплатформенность при таком варианте обеспечивается не для всех операционных систем, а для класса операционных систем и соответствующего класса устройств, например, операционных систем, предназначенных для персональных компьютеров. Так, например, приложение, написанное на языке Java для персонального компьютера не может быть напрямую перенесено на мобильное устройство, поскольку при разработке мобильных приложений учитываются другие принципы работы пользователя с интерфейсом системы, отсутствие многооконности и многое другое.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			;;
			=> nrel_note: [<p>Важно также отметить, что даже для интерпретируемых языков программирования существует проблема зависимости приложения от используемого набора библиотек и фреймворков. Так, при разработке интерфейса web-приложения могут использоваться популярные фреймворки AngularJS и ReactJS, при этом после выбора одного из них быстрый перевод приложения на другой фреймворк невозможен.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*);
		[<p>Реализация системы в виде web-приложения, работа с которым осуществляется через web-браузер и интерфейс которого, таким образом, реализуется на базе общепринятых стандартов Всемирной паутины (HTML, CSS, JavaScript и языки и библиотеки на его основе). Такой вариант обеспечивает возможность работы с приложением с любого устройства, имеющего web-браузер, в том числе, мобильного.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_139: 
				[<p>Как правило, высокая требовательность к производительности конечного устройства. Современный web-браузер является одним из самых ресурсоёмких приложений почти на любом устройстве.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Остается за кадром проблема обеспечения платформенной независимости серверной части web-приложения, которая должна решаться каким-то другим способом.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Несмотря на стандартизацию, разработчикам часто приходится учитывать особенности конкретных web-браузеров и тестировать работоспособность приложений для каждого из них.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*);
				[<p>Потенциально одним и тем же web-приложением можно пользоваться на любом устройстве, однако для обеспечения удобства и наглядности как правило приходится разрабатывать отдельные версии web-приложения, адаптированные под разные устройства, имеющие, например разные размеры экрана.</p>]
				(*
					<- lang_ru;;
					=> nrel_format: format_html;;
				*)
			;;
		*);
		[<p>Виртуализация (контейнеризация, эмуляция). Перечисленные термины не являются полностью синонимичными, но в целом обозначают подход, при котором в рамках операционной системы создается некоторое изолированное локальное окружение (виртуальная машина, контейнер, среда эмуляции), содержащее все необходимые для работы приложения настройки и гарантирующее его работу на любых операционных системах и устройствах, где может интерпретироваться соответствующая виртуальная машина или контейнер. Соответственно, запуск таких окружений требует установки на конечное устройство соответствующего интерпретатора или эмулятора.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
			=> .system_element_138: [<p>Данный подход бурно развивается и набирает популярность в настоящее время, поскольку позволяет решить не только проблему кроссплатформенности, но и избавить потребителя от установки большого числа зависимостей и выполнения настройки приложения на конечном устройстве.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
			=> .system_element_2030: [<p>Среди популярных средств, реализующих данный подход можно указать средства виртуализации (VirtualBox, DosBox, VMWare Workstation), контейнеризации (Docker), эмуляции приложений Android для настольных операционных систем (Genymotion, Bluestacks, Anbox) и многие другие.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
			=> .system_element_139: [<p>К недостаткам такого подхода можно отнести его ресурсоемкость и снижение производительности, а также ограниченность применения (как правило, соответствующие интерпретаторы разрабатываются только для наиболее популярных и востребованных операционных систем). Кроме того, возникает проблема следующего уровня, связанная уже с зависимостью от выбранного средства виртуализации (контейнеризации).</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);;
		*)
	;;

	.system_element_4921
	=> nrel_note: [<p>Проблеме обеспечения платформенной независимости в современных компьютерных системах уделяется достаточно много внимания, однако в полной мере она не решена. В то же время, существует большое количество успешных частных решений, которые, однако, обладают серьезными ограничениями, связанными, в первую очередь, с отсутствием унификации современных подходов к разработке компьютерных систем.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Еще более актуальной проблема обеспечения платформенной независимости становится в контексте разработки <i>интеллектуальных компьютерных систем</i>.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_4926: 
			[<p>Значительно более сложная по сравнению с традиционными компьютерными системами структура представляемой информации и, соответственно, многообразие форм ее представления, хранение и обработка которых на разных платформах могут быть организованы совершенно по-разному.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Высокие требования к производительности для некоторых классов систем, в частности, систем, использующих машинное обучение, что приводит к созданию специализированных аппаратных архитектур, таких как, например, нейрокомпьютеры.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_1: 
					.system_element_4891;
					.system_element_4892
				;;
			*);
			[<p>Многообразие моделей решения задач, которые в общем случае реализуются по-разному в разных системах.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Актуальность разработки гибридных интеллектуальных систем, в рамках которых интегрируются различные виды знаний и различные модели решения задач. В виду отсутствия на настоящий момент общепринятой унифицированной основы для их интеграции такие системы создаются в основном с ориентацией на какую-то определенную платформу и трудно переносимы на другие платформы.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
				=> .system_element_1: 
					.system_element_4927
				;;
			*)
		;;
	*);;

	.system_element_4928
	<= nrel_inclusion: .system_element_4921;
	=> nrel_note: [<p>Проблема обеспечения платформенной независимости для интеллектуальных систем обусловлена во многом отсутствием семантической совместимости компонентов таких систем между собой, что, в свою очередь, создает препятствия даже для реализации подходов к обеспечению платформенной независимости, реализуемых в процессе разработки традиционных компьютерных систем. То есть, для решения проблемы обеспечения платформенной независимости интеллектуальных систем, требуется вначале обеспечить семантическую совместимость компонентов таких систем между собой.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_426: .system_element_4929;;
	*);;

	.system_element_4929
	<=> .system_element_72: {
		[<p>Унификация представления различного рода информации, хранимой в базах знаний таких систем.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Унификация базовых моделей обработки информации, хранимой в базах знаний таких систем, то есть выделение универсального низкоуровневого языка программирования, позволяющего осуществлять обработку информации, хранимой в унифицированном виде.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Унификация принципов реализации различных моделей решения задач и, как следствие, возможность их интеграции в рамках гибридных интеллектуальных систем.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*);
		[<p>Унификация принципов разработки интерфейсов компьютерных систем, которая бы позволила реализовать в рамках одной интеллектуальной системы возможность взаимодействия с другими системами и пользователями таких систем на разных внешних языках, включая естественные языки.</p>]
		(*
			<- lang_ru;;
			=> nrel_format: format_html;;
		*)
	};
	=> nrel_note: [<p>Указанные принципы реализуются в рамках <i>Технологии OSTIS</i>, которая, таким образом, может стать основой для решения проблемы обеспечения семантической совместимости компонентов интеллектуальных компьютерных систем в целом и обеспечения платформенной независимости таких систем. С одной стороны, принципы, лежащие в основе <i>Технологии OSTIS</i>, обеспечивают принципиальную возможность реализации платформенной независимости компьютерных систем, разрабатываемых на ее основе ostis-систем. С другой стороны, благодаря своей универсальности <i>Технология OSTIS</i> позволяет преобразовать любую современную компьютерную систему в ostis-систему, которая будет функционально эквивалентна исходной компьютерной системе, но при этом будет обладать всеми перечисленными выше свойствами, создающими предпосылки для решения проблемы платформенной независимости.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);
	=> nrel_note: [<p>Для реализации данного подхода в рамках Технологии OSTIS требуется разработать семейство онтологий, обеспечивающих уточнение таких понятий, как ostis-система, ostis-платформа, их структуры, типологии и предъявляемых к ним требований. Рассмотрению указанных понятий и посвящена данная онтология.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
	*);;

	.system_element_4922
	=> nrel_note: [<p>Что касается обозначенной проблемы зависимости компьютерных систем от конкретных фрейморков, то аналогичная проблема может возникнуть и при дальнейшем развитии <i>Технологии OSTIS</i>, в ситуации, когда соответствующие библиотеки будут содержать достаточно большое количество функционально эквивалентных компонентов. Однако, благодаря принципам, лежащим в основе <i>Технологии OSTIS</i>, в частности, смысловому представлению информации и семантической совместимости компонентов, данная проблема будет значительно менее острой.</p>]
	(*
		<- lang_ru;;
		=> nrel_format: format_html;;
		=> .system_element_3470: {
			[<p>Число функционально эквивалентных компонентов будет значительно ниже, чем в традиционных информационных технологиях, нет необходимости создавать синтаксически разные компоненты, отличия будут только на семантическом уровне.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Сами по себе компоненты будут являться более универсальными, то есть смогут быть использованы в значительно большем количестве систем.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Есть возможность автоматически выявить близкие компоненты, их сходства, различия, потенциальные конфликты и зависимости компонентов.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*);
			[<p>Есть возможность построения достаточно простых (по сравнению с традиционными технологиями) процедур перехода от одного фреймворка к другому, поскольку все компоненты и фреймворки имеют общую формальную смысловую основу, более высокоуровневую, чем в традиционных технологиях.</p>]
			(*
				<- lang_ru;;
				=> nrel_format: format_html;;
			*)
		};;
	*);;
*];
=> nrel_comment: [<p>Завершили "Сегмент. Уточнение понятия платформенной независимости и анализ современных подходов к ее обеспечению"</p>];;

*];;